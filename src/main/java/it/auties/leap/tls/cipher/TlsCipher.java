package it.auties.leap.tls.cipher;

import it.auties.leap.tls.cipher.auth.TlsAuth;
import it.auties.leap.tls.cipher.engine.*;
import it.auties.leap.tls.cipher.exchange.TlsKeyExchange;
import it.auties.leap.tls.cipher.mode.*;
import it.auties.leap.tls.config.TlsVersion;
import it.auties.leap.tls.exception.TlsException;
import it.auties.leap.tls.hash.TlsExchangeAuthenticator;
import it.auties.leap.tls.hash.TlsHash;

import java.net.URI;
import java.util.List;
import java.util.Objects;
import java.util.OptionalInt;
import java.util.function.Supplier;

// Most of the code here is autogenerated using GenerateCiphers
public final class TlsCipher {
    //<editor-fold desc="Ciphers">
    private static final TlsCipher TLS_AES_128_CCM_8_SHA256 = new TlsCipher(0x1305, Factory.aes128Ccm8(), TlsKeyExchange::none, TlsAuth::none, TlsHash::sha256, List.of(TlsVersion.TLS13), true);
    private static final TlsCipher TLS_AES_128_CCM_SHA256 = new TlsCipher(0x1304, Factory.aes128Ccm(), TlsKeyExchange::none, TlsAuth::none, TlsHash::sha256, List.of(TlsVersion.TLS13), true);
    private static final TlsCipher TLS_AES_128_GCM_SHA256 = new TlsCipher(0x1301, Factory.aes128Gcm(), TlsKeyExchange::none, TlsAuth::none, TlsHash::sha256, List.of(TlsVersion.TLS13), false);
    private static final TlsCipher TLS_AES_256_GCM_SHA384 = new TlsCipher(0x1302, Factory.aes256Gcm(), TlsKeyExchange::none, TlsAuth::none, TlsHash::sha384, List.of(TlsVersion.TLS13), false);
    private static final TlsCipher TLS_CHACHA20_POLY1305_SHA256 = new TlsCipher(0x1303, Factory.chacha20Poly1305(), TlsKeyExchange::none, TlsAuth::none, TlsHash::sha256, List.of(TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_ANON_EXPORT_WITH_DES40_CBC_SHA = new TlsCipher(0x0019, Factory.des40Cbc(), TlsKeyExchange::dh, TlsAuth::anonymous, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_ANON_EXPORT_WITH_RC4_40_MD5 = new TlsCipher(0x0017, Factory.rc440(), TlsKeyExchange::dh, TlsAuth::anonymous, TlsHash::md5, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_ANON_WITH_3DES_EDE_CBC_SHA = new TlsCipher(0x001B, Factory.desEdeCbc(), TlsKeyExchange::dh, TlsAuth::anonymous, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_ANON_WITH_AES_128_CBC_SHA = new TlsCipher(0x0034, Factory.aes128Cbc(), TlsKeyExchange::dh, TlsAuth::anonymous, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_ANON_WITH_AES_128_CBC_SHA256 = new TlsCipher(0x006C, Factory.aes128Cbc(), TlsKeyExchange::dh, TlsAuth::anonymous, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_ANON_WITH_AES_128_GCM_SHA256 = new TlsCipher(0x00A6, Factory.aes128Gcm(), TlsKeyExchange::dh, TlsAuth::anonymous, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_ANON_WITH_AES_256_CBC_SHA = new TlsCipher(0x003A, Factory.aes256Cbc(), TlsKeyExchange::dh, TlsAuth::anonymous, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_ANON_WITH_AES_256_CBC_SHA256 = new TlsCipher(0x006D, Factory.aes256Cbc(), TlsKeyExchange::dh, TlsAuth::anonymous, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_ANON_WITH_AES_256_GCM_SHA384 = new TlsCipher(0x00A7, Factory.aes256Gcm(), TlsKeyExchange::dh, TlsAuth::anonymous, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_ANON_WITH_ARIA_128_CBC_SHA256 = new TlsCipher(0xC046, Factory.aria128Cbc(), TlsKeyExchange::dh, TlsAuth::anonymous, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_ANON_WITH_ARIA_128_GCM_SHA256 = new TlsCipher(0xC05A, Factory.aria128Gcm(), TlsKeyExchange::dh, TlsAuth::anonymous, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_ANON_WITH_ARIA_256_CBC_SHA384 = new TlsCipher(0xC047, Factory.aria256Cbc(), TlsKeyExchange::dh, TlsAuth::anonymous, TlsHash::sha384, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_ANON_WITH_ARIA_256_GCM_SHA384 = new TlsCipher(0xC05B, Factory.aria256Gcm(), TlsKeyExchange::dh, TlsAuth::anonymous, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_ANON_WITH_CAMELLIA_128_CBC_SHA = new TlsCipher(0x0046, Factory.camellia128Cbc(), TlsKeyExchange::dh, TlsAuth::anonymous, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_ANON_WITH_CAMELLIA_128_CBC_SHA256 = new TlsCipher(0x00BF, Factory.camellia128Cbc(), TlsKeyExchange::dh, TlsAuth::anonymous, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_ANON_WITH_CAMELLIA_128_GCM_SHA256 = new TlsCipher(0xC084, Factory.camellia128Gcm(), TlsKeyExchange::dh, TlsAuth::anonymous, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_ANON_WITH_CAMELLIA_256_CBC_SHA = new TlsCipher(0x0089, Factory.camellia256Cbc(), TlsKeyExchange::dh, TlsAuth::anonymous, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_ANON_WITH_CAMELLIA_256_CBC_SHA256 = new TlsCipher(0x00C5, Factory.camellia256Cbc(), TlsKeyExchange::dh, TlsAuth::anonymous, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_ANON_WITH_CAMELLIA_256_GCM_SHA384 = new TlsCipher(0xC085, Factory.camellia256Gcm(), TlsKeyExchange::dh, TlsAuth::anonymous, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_ANON_WITH_DES_CBC_SHA = new TlsCipher(0x001A, Factory.desCbc(), TlsKeyExchange::dh, TlsAuth::anonymous, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_ANON_WITH_RC4_128_MD5 = new TlsCipher(0x0018, Factory.rc4128(), TlsKeyExchange::dh, TlsAuth::anonymous, TlsHash::md5, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_ANON_WITH_SEED_CBC_SHA = new TlsCipher(0x009B, Factory.seedCbc(), TlsKeyExchange::dh, TlsAuth::anonymous, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA = new TlsCipher(0x000B, Factory.des40Cbc(), TlsKeyExchange::dh, TlsAuth::dss, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA = new TlsCipher(0x000D, Factory.desEdeCbc(), TlsKeyExchange::dh, TlsAuth::dss, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_DSS_WITH_AES_128_CBC_SHA = new TlsCipher(0x0030, Factory.aes128Cbc(), TlsKeyExchange::dh, TlsAuth::dss, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_DSS_WITH_AES_128_CBC_SHA256 = new TlsCipher(0x003E, Factory.aes128Cbc(), TlsKeyExchange::dh, TlsAuth::dss, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_DSS_WITH_AES_128_GCM_SHA256 = new TlsCipher(0x00A4, Factory.aes128Gcm(), TlsKeyExchange::dh, TlsAuth::dss, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_DSS_WITH_AES_256_CBC_SHA = new TlsCipher(0x0036, Factory.aes256Cbc(), TlsKeyExchange::dh, TlsAuth::dss, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_DSS_WITH_AES_256_CBC_SHA256 = new TlsCipher(0x0068, Factory.aes256Cbc(), TlsKeyExchange::dh, TlsAuth::dss, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_DSS_WITH_AES_256_GCM_SHA384 = new TlsCipher(0x00A5, Factory.aes256Gcm(), TlsKeyExchange::dh, TlsAuth::dss, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256 = new TlsCipher(0xC03E, Factory.aria128Cbc(), TlsKeyExchange::dh, TlsAuth::dss, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256 = new TlsCipher(0xC058, Factory.aria128Gcm(), TlsKeyExchange::dh, TlsAuth::dss, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384 = new TlsCipher(0xC03F, Factory.aria256Cbc(), TlsKeyExchange::dh, TlsAuth::dss, TlsHash::sha384, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384 = new TlsCipher(0xC059, Factory.aria256Gcm(), TlsKeyExchange::dh, TlsAuth::dss, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA = new TlsCipher(0x0042, Factory.camellia128Cbc(), TlsKeyExchange::dh, TlsAuth::dss, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256 = new TlsCipher(0x00BB, Factory.camellia128Cbc(), TlsKeyExchange::dh, TlsAuth::dss, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256 = new TlsCipher(0xC082, Factory.camellia128Gcm(), TlsKeyExchange::dh, TlsAuth::dss, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA = new TlsCipher(0x0085, Factory.camellia256Cbc(), TlsKeyExchange::dh, TlsAuth::dss, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256 = new TlsCipher(0x00C1, Factory.camellia256Cbc(), TlsKeyExchange::dh, TlsAuth::dss, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384 = new TlsCipher(0xC083, Factory.camellia256Gcm(), TlsKeyExchange::dh, TlsAuth::dss, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_DSS_WITH_DES_CBC_SHA = new TlsCipher(0x000C, Factory.desCbc(), TlsKeyExchange::dh, TlsAuth::dss, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_DSS_WITH_SEED_CBC_SHA = new TlsCipher(0x0097, Factory.seedCbc(), TlsKeyExchange::dh, TlsAuth::dss, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA = new TlsCipher(0x0011, Factory.des40Cbc(), TlsKeyExchange::dhe, TlsAuth::dss, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA = new TlsCipher(0x0013, Factory.desEdeCbc(), TlsKeyExchange::dhe, TlsAuth::dss, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_DSS_WITH_AES_128_CBC_SHA = new TlsCipher(0x0032, Factory.aes128Cbc(), TlsKeyExchange::dhe, TlsAuth::dss, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 = new TlsCipher(0x0040, Factory.aes128Cbc(), TlsKeyExchange::dhe, TlsAuth::dss, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 = new TlsCipher(0x00A2, Factory.aes128Gcm(), TlsKeyExchange::dhe, TlsAuth::dss, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_DSS_WITH_AES_256_CBC_SHA = new TlsCipher(0x0038, Factory.aes256Cbc(), TlsKeyExchange::dhe, TlsAuth::dss, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 = new TlsCipher(0x006A, Factory.aes256Cbc(), TlsKeyExchange::dhe, TlsAuth::dss, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_DSS_WITH_AES_256_GCM_SHA384 = new TlsCipher(0x00A3, Factory.aes256Gcm(), TlsKeyExchange::dhe, TlsAuth::dss, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256 = new TlsCipher(0xC042, Factory.aria128Cbc(), TlsKeyExchange::dhe, TlsAuth::dss, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256 = new TlsCipher(0xC056, Factory.aria128Gcm(), TlsKeyExchange::dhe, TlsAuth::dss, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384 = new TlsCipher(0xC043, Factory.aria256Cbc(), TlsKeyExchange::dhe, TlsAuth::dss, TlsHash::sha384, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384 = new TlsCipher(0xC057, Factory.aria256Gcm(), TlsKeyExchange::dhe, TlsAuth::dss, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA = new TlsCipher(0x0044, Factory.camellia128Cbc(), TlsKeyExchange::dhe, TlsAuth::dss, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256 = new TlsCipher(0x00BD, Factory.camellia128Cbc(), TlsKeyExchange::dhe, TlsAuth::dss, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256 = new TlsCipher(0xC080, Factory.camellia128Gcm(), TlsKeyExchange::dhe, TlsAuth::dss, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA = new TlsCipher(0x0087, Factory.camellia256Cbc(), TlsKeyExchange::dhe, TlsAuth::dss, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256 = new TlsCipher(0x00C3, Factory.camellia256Cbc(), TlsKeyExchange::dhe, TlsAuth::dss, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384 = new TlsCipher(0xC081, Factory.camellia256Gcm(), TlsKeyExchange::dhe, TlsAuth::dss, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_DSS_WITH_DES_CBC_SHA = new TlsCipher(0x0012, Factory.desCbc(), TlsKeyExchange::dhe, TlsAuth::dss, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_DSS_WITH_SEED_CBC_SHA = new TlsCipher(0x0099, Factory.seedCbc(), TlsKeyExchange::dhe, TlsAuth::dss, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA = new TlsCipher(0x008F, Factory.desEdeCbc(), TlsKeyExchange::dhe, TlsAuth::psk, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_PSK_WITH_AES_128_CBC_SHA = new TlsCipher(0x0090, Factory.aes128Cbc(), TlsKeyExchange::dhe, TlsAuth::psk, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_PSK_WITH_AES_128_CBC_SHA256 = new TlsCipher(0x00B2, Factory.aes128Cbc(), TlsKeyExchange::dhe, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_PSK_WITH_AES_128_CCM = new TlsCipher(0xC0A6, Factory.aes128Ccm(), TlsKeyExchange::dhe, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_PSK_WITH_AES_128_GCM_SHA256 = new TlsCipher(0x00AA, Factory.aes128Gcm(), TlsKeyExchange::dhe, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_PSK_WITH_AES_256_CBC_SHA = new TlsCipher(0x0091, Factory.aes256Cbc(), TlsKeyExchange::dhe, TlsAuth::psk, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_PSK_WITH_AES_256_CBC_SHA384 = new TlsCipher(0x00B3, Factory.aes256Cbc(), TlsKeyExchange::dhe, TlsAuth::psk, TlsHash::sha384, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_PSK_WITH_AES_256_CCM = new TlsCipher(0xC0A7, Factory.aes256Ccm(), TlsKeyExchange::dhe, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_PSK_WITH_AES_256_GCM_SHA384 = new TlsCipher(0x00AB, Factory.aes256Gcm(), TlsKeyExchange::dhe, TlsAuth::psk, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256 = new TlsCipher(0xC066, Factory.aria128Cbc(), TlsKeyExchange::dhe, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256 = new TlsCipher(0xC06C, Factory.aria128Gcm(), TlsKeyExchange::dhe, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384 = new TlsCipher(0xC067, Factory.aria256Cbc(), TlsKeyExchange::dhe, TlsAuth::psk, TlsHash::sha384, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384 = new TlsCipher(0xC06D, Factory.aria256Gcm(), TlsKeyExchange::dhe, TlsAuth::psk, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = new TlsCipher(0xC096, Factory.camellia128Cbc(), TlsKeyExchange::dhe, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256 = new TlsCipher(0xC090, Factory.camellia128Gcm(), TlsKeyExchange::dhe, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = new TlsCipher(0xC097, Factory.camellia256Cbc(), TlsKeyExchange::dhe, TlsAuth::psk, TlsHash::sha384, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384 = new TlsCipher(0xC091, Factory.camellia256Gcm(), TlsKeyExchange::dhe, TlsAuth::psk, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256 = new TlsCipher(0xCCAD, Factory.chacha20Poly1305(), TlsKeyExchange::dhe, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_PSK_WITH_NULL_SHA = new TlsCipher(0x002D, Factory.none(), TlsKeyExchange::dhe, TlsAuth::psk, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_PSK_WITH_NULL_SHA256 = new TlsCipher(0x00B4, Factory.none(), TlsKeyExchange::dhe, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_PSK_WITH_NULL_SHA384 = new TlsCipher(0x00B5, Factory.none(), TlsKeyExchange::dhe, TlsAuth::psk, TlsHash::sha384, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_PSK_WITH_RC4_128_SHA = new TlsCipher(0x008E, Factory.rc4128(), TlsKeyExchange::dhe, TlsAuth::psk, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA = new TlsCipher(0x0014, Factory.des40Cbc(), TlsKeyExchange::dhe, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA = new TlsCipher(0x0016, Factory.desEdeCbc(), TlsKeyExchange::dhe, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_RSA_WITH_AES_128_CBC_SHA = new TlsCipher(0x0033, Factory.aes128Cbc(), TlsKeyExchange::dhe, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 = new TlsCipher(0x0067, Factory.aes128Cbc(), TlsKeyExchange::dhe, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_RSA_WITH_AES_128_CCM = new TlsCipher(0xC09E, Factory.aes128Ccm(), TlsKeyExchange::dhe, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_RSA_WITH_AES_128_CCM_8 = new TlsCipher(0xC0A2, Factory.aes128Ccm8(), TlsKeyExchange::dhe, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 = new TlsCipher(0x009E, Factory.aes128Gcm(), TlsKeyExchange::dhe, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_RSA_WITH_AES_256_CBC_SHA = new TlsCipher(0x0039, Factory.aes256Cbc(), TlsKeyExchange::dhe, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 = new TlsCipher(0x006B, Factory.aes256Cbc(), TlsKeyExchange::dhe, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_RSA_WITH_AES_256_CCM = new TlsCipher(0xC09F, Factory.aes256Ccm(), TlsKeyExchange::dhe, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_RSA_WITH_AES_256_CCM_8 = new TlsCipher(0xC0A3, Factory.aes256Ccm8(), TlsKeyExchange::dhe, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 = new TlsCipher(0x009F, Factory.aes256Gcm(), TlsKeyExchange::dhe, TlsAuth::rsa, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256 = new TlsCipher(0xC044, Factory.aria128Cbc(), TlsKeyExchange::dhe, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256 = new TlsCipher(0xC052, Factory.aria128Gcm(), TlsKeyExchange::dhe, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384 = new TlsCipher(0xC045, Factory.aria256Cbc(), TlsKeyExchange::dhe, TlsAuth::rsa, TlsHash::sha384, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384 = new TlsCipher(0xC053, Factory.aria256Gcm(), TlsKeyExchange::dhe, TlsAuth::rsa, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA = new TlsCipher(0x0045, Factory.camellia128Cbc(), TlsKeyExchange::dhe, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = new TlsCipher(0x00BE, Factory.camellia128Cbc(), TlsKeyExchange::dhe, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256 = new TlsCipher(0xC07C, Factory.camellia128Gcm(), TlsKeyExchange::dhe, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA = new TlsCipher(0x0088, Factory.camellia256Cbc(), TlsKeyExchange::dhe, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 = new TlsCipher(0x00C4, Factory.camellia256Cbc(), TlsKeyExchange::dhe, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384 = new TlsCipher(0xC07D, Factory.camellia256Gcm(), TlsKeyExchange::dhe, TlsAuth::rsa, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256 = new TlsCipher(0xCCAA, Factory.chacha20Poly1305(), TlsKeyExchange::dhe, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_RSA_WITH_DES_CBC_SHA = new TlsCipher(0x0015, Factory.desCbc(), TlsKeyExchange::dhe, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DHE_RSA_WITH_SEED_CBC_SHA = new TlsCipher(0x009A, Factory.seedCbc(), TlsKeyExchange::dhe, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA = new TlsCipher(0x000E, Factory.des40Cbc(), TlsKeyExchange::dh, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA = new TlsCipher(0x0010, Factory.desEdeCbc(), TlsKeyExchange::dh, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_RSA_WITH_AES_128_CBC_SHA = new TlsCipher(0x0031, Factory.aes128Cbc(), TlsKeyExchange::dh, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_RSA_WITH_AES_128_CBC_SHA256 = new TlsCipher(0x003F, Factory.aes128Cbc(), TlsKeyExchange::dh, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_RSA_WITH_AES_128_GCM_SHA256 = new TlsCipher(0x00A0, Factory.aes128Gcm(), TlsKeyExchange::dh, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_RSA_WITH_AES_256_CBC_SHA = new TlsCipher(0x0037, Factory.aes256Cbc(), TlsKeyExchange::dh, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_RSA_WITH_AES_256_CBC_SHA256 = new TlsCipher(0x0069, Factory.aes256Cbc(), TlsKeyExchange::dh, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_RSA_WITH_AES_256_GCM_SHA384 = new TlsCipher(0x00A1, Factory.aes256Gcm(), TlsKeyExchange::dh, TlsAuth::rsa, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256 = new TlsCipher(0xC040, Factory.aria128Cbc(), TlsKeyExchange::dh, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256 = new TlsCipher(0xC054, Factory.aria128Gcm(), TlsKeyExchange::dh, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384 = new TlsCipher(0xC041, Factory.aria256Cbc(), TlsKeyExchange::dh, TlsAuth::rsa, TlsHash::sha384, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384 = new TlsCipher(0xC055, Factory.aria256Gcm(), TlsKeyExchange::dh, TlsAuth::rsa, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA = new TlsCipher(0x0043, Factory.camellia128Cbc(), TlsKeyExchange::dh, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = new TlsCipher(0x00BC, Factory.camellia128Cbc(), TlsKeyExchange::dh, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256 = new TlsCipher(0xC07E, Factory.camellia128Gcm(), TlsKeyExchange::dh, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA = new TlsCipher(0x0086, Factory.camellia256Cbc(), TlsKeyExchange::dh, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256 = new TlsCipher(0x00C2, Factory.camellia256Cbc(), TlsKeyExchange::dh, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384 = new TlsCipher(0xC07F, Factory.camellia256Gcm(), TlsKeyExchange::dh, TlsAuth::rsa, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_RSA_WITH_DES_CBC_SHA = new TlsCipher(0x000F, Factory.desCbc(), TlsKeyExchange::dh, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_DH_RSA_WITH_SEED_CBC_SHA = new TlsCipher(0x0098, Factory.seedCbc(), TlsKeyExchange::dh, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECCPWD_WITH_AES_128_CCM_SHA256 = new TlsCipher(0xC0B2, Factory.aes128Ccm(), TlsKeyExchange::eccpwd, TlsAuth::eccPwd, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), true);
    private static final TlsCipher TLS_ECCPWD_WITH_AES_128_GCM_SHA256 = new TlsCipher(0xC0B0, Factory.aes128Gcm(), TlsKeyExchange::eccpwd, TlsAuth::eccPwd, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECCPWD_WITH_AES_256_CCM_SHA384 = new TlsCipher(0xC0B3, Factory.aes256Ccm(), TlsKeyExchange::eccpwd, TlsAuth::eccPwd, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), true);
    private static final TlsCipher TLS_ECCPWD_WITH_AES_256_GCM_SHA384 = new TlsCipher(0xC0B1, Factory.aes256Gcm(), TlsKeyExchange::eccpwd, TlsAuth::eccPwd, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_ANON_WITH_3DES_EDE_CBC_SHA = new TlsCipher(0xC017, Factory.desEdeCbc(), TlsKeyExchange::ecdh, TlsAuth::anonymous, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_ANON_WITH_AES_128_CBC_SHA = new TlsCipher(0xC018, Factory.aes128Cbc(), TlsKeyExchange::ecdh, TlsAuth::anonymous, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_ANON_WITH_AES_256_CBC_SHA = new TlsCipher(0xC019, Factory.aes256Cbc(), TlsKeyExchange::ecdh, TlsAuth::anonymous, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_ANON_WITH_NULL_SHA = new TlsCipher(0xC015, Factory.none(), TlsKeyExchange::ecdh, TlsAuth::anonymous, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_ANON_WITH_RC4_128_SHA = new TlsCipher(0xC016, Factory.rc4128(), TlsKeyExchange::ecdh, TlsAuth::anonymous, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA = new TlsCipher(0xC003, Factory.desEdeCbc(), TlsKeyExchange::ecdh, TlsAuth::ecDsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA = new TlsCipher(0xC004, Factory.aes128Cbc(), TlsKeyExchange::ecdh, TlsAuth::ecDsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 = new TlsCipher(0xC025, Factory.aes128Cbc(), TlsKeyExchange::ecdh, TlsAuth::ecDsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 = new TlsCipher(0xC02D, Factory.aes128Gcm(), TlsKeyExchange::ecdh, TlsAuth::ecDsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA = new TlsCipher(0xC005, Factory.aes256Cbc(), TlsKeyExchange::ecdh, TlsAuth::ecDsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 = new TlsCipher(0xC026, Factory.aes256Cbc(), TlsKeyExchange::ecdh, TlsAuth::ecDsa, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 = new TlsCipher(0xC02E, Factory.aes256Gcm(), TlsKeyExchange::ecdh, TlsAuth::ecDsa, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256 = new TlsCipher(0xC04A, Factory.aria128Cbc(), TlsKeyExchange::ecdh, TlsAuth::ecDsa, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256 = new TlsCipher(0xC05E, Factory.aria128Gcm(), TlsKeyExchange::ecdh, TlsAuth::ecDsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384 = new TlsCipher(0xC04B, Factory.aria256Cbc(), TlsKeyExchange::ecdh, TlsAuth::ecDsa, TlsHash::sha384, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384 = new TlsCipher(0xC05F, Factory.aria256Gcm(), TlsKeyExchange::ecdh, TlsAuth::ecDsa, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = new TlsCipher(0xC074, Factory.camellia128Cbc(), TlsKeyExchange::ecdh, TlsAuth::ecDsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256 = new TlsCipher(0xC088, Factory.camellia128Gcm(), TlsKeyExchange::ecdh, TlsAuth::ecDsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = new TlsCipher(0xC075, Factory.camellia256Cbc(), TlsKeyExchange::ecdh, TlsAuth::ecDsa, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384 = new TlsCipher(0xC089, Factory.camellia256Gcm(), TlsKeyExchange::ecdh, TlsAuth::ecDsa, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_ECDSA_WITH_NULL_SHA = new TlsCipher(0xC001, Factory.none(), TlsKeyExchange::ecdh, TlsAuth::ecDsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_ECDSA_WITH_RC4_128_SHA = new TlsCipher(0xC002, Factory.rc4128(), TlsKeyExchange::ecdh, TlsAuth::ecDsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA = new TlsCipher(0xC008, Factory.desEdeCbc(), TlsKeyExchange::ecdhe, TlsAuth::ecDsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = new TlsCipher(0xC009, Factory.aes128Cbc(), TlsKeyExchange::ecdhe, TlsAuth::ecDsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = new TlsCipher(0xC023, Factory.aes128Cbc(), TlsKeyExchange::ecdhe, TlsAuth::ecDsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_ECDSA_WITH_AES_128_CCM = new TlsCipher(0xC0AC, Factory.aes128Ccm(), TlsKeyExchange::ecdhe, TlsAuth::ecDsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), true);
    private static final TlsCipher TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8 = new TlsCipher(0xC0AE, Factory.aes128Ccm8(), TlsKeyExchange::ecdhe, TlsAuth::ecDsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), true);
    private static final TlsCipher TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = new TlsCipher(0xC02B, Factory.aes128Gcm(), TlsKeyExchange::ecdhe, TlsAuth::ecDsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = new TlsCipher(0xC00A, Factory.aes256Cbc(), TlsKeyExchange::ecdhe, TlsAuth::ecDsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 = new TlsCipher(0xC024, Factory.aes256Cbc(), TlsKeyExchange::ecdhe, TlsAuth::ecDsa, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_ECDSA_WITH_AES_256_CCM = new TlsCipher(0xC0AD, Factory.aes256Ccm(), TlsKeyExchange::ecdhe, TlsAuth::ecDsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), true);
    private static final TlsCipher TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8 = new TlsCipher(0xC0AF, Factory.aes256Ccm8(), TlsKeyExchange::ecdhe, TlsAuth::ecDsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), true);
    private static final TlsCipher TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = new TlsCipher(0xC02C, Factory.aes256Gcm(), TlsKeyExchange::ecdhe, TlsAuth::ecDsa, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256 = new TlsCipher(0xC048, Factory.aria128Cbc(), TlsKeyExchange::ecdhe, TlsAuth::ecDsa, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256 = new TlsCipher(0xC05C, Factory.aria128Gcm(), TlsKeyExchange::ecdhe, TlsAuth::ecDsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384 = new TlsCipher(0xC049, Factory.aria256Cbc(), TlsKeyExchange::ecdhe, TlsAuth::ecDsa, TlsHash::sha384, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384 = new TlsCipher(0xC05D, Factory.aria256Gcm(), TlsKeyExchange::ecdhe, TlsAuth::ecDsa, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = new TlsCipher(0xC072, Factory.camellia128Cbc(), TlsKeyExchange::ecdhe, TlsAuth::ecDsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256 = new TlsCipher(0xC086, Factory.camellia128Gcm(), TlsKeyExchange::ecdhe, TlsAuth::ecDsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = new TlsCipher(0xC073, Factory.camellia256Cbc(), TlsKeyExchange::ecdhe, TlsAuth::ecDsa, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384 = new TlsCipher(0xC087, Factory.camellia256Gcm(), TlsKeyExchange::ecdhe, TlsAuth::ecDsa, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 = new TlsCipher(0xCCA9, Factory.chacha20Poly1305(), TlsKeyExchange::ecdhe, TlsAuth::ecDsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_ECDSA_WITH_NULL_SHA = new TlsCipher(0xC006, Factory.none(), TlsKeyExchange::ecdhe, TlsAuth::ecDsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_ECDSA_WITH_RC4_128_SHA = new TlsCipher(0xC007, Factory.rc4128(), TlsKeyExchange::ecdhe, TlsAuth::ecDsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA = new TlsCipher(0xC034, Factory.desEdeCbc(), TlsKeyExchange::ecdhe, TlsAuth::psk, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA = new TlsCipher(0xC035, Factory.aes128Cbc(), TlsKeyExchange::ecdhe, TlsAuth::psk, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256 = new TlsCipher(0xC037, Factory.aes128Cbc(), TlsKeyExchange::ecdhe, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_PSK_WITH_AES_128_CCM_8_SHA256 = new TlsCipher(0xD003, Factory.aes128Ccm8(), TlsKeyExchange::ecdhe, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), true);
    private static final TlsCipher TLS_ECDHE_PSK_WITH_AES_128_CCM_SHA256 = new TlsCipher(0xD005, Factory.aes128Ccm(), TlsKeyExchange::ecdhe, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), true);
    private static final TlsCipher TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256 = new TlsCipher(0xD001, Factory.aes128Gcm(), TlsKeyExchange::ecdhe, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA = new TlsCipher(0xC036, Factory.aes256Cbc(), TlsKeyExchange::ecdhe, TlsAuth::psk, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384 = new TlsCipher(0xC038, Factory.aes256Cbc(), TlsKeyExchange::ecdhe, TlsAuth::psk, TlsHash::sha384, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384 = new TlsCipher(0xD002, Factory.aes256Gcm(), TlsKeyExchange::ecdhe, TlsAuth::psk, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256 = new TlsCipher(0xC070, Factory.aria128Cbc(), TlsKeyExchange::ecdhe, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384 = new TlsCipher(0xC071, Factory.aria256Cbc(), TlsKeyExchange::ecdhe, TlsAuth::psk, TlsHash::sha384, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = new TlsCipher(0xC09A, Factory.camellia128Cbc(), TlsKeyExchange::ecdhe, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = new TlsCipher(0xC09B, Factory.camellia256Cbc(), TlsKeyExchange::ecdhe, TlsAuth::psk, TlsHash::sha384, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256 = new TlsCipher(0xCCAC, Factory.chacha20Poly1305(), TlsKeyExchange::ecdhe, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_PSK_WITH_NULL_SHA = new TlsCipher(0xC039, Factory.none(), TlsKeyExchange::ecdhe, TlsAuth::psk, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_PSK_WITH_NULL_SHA256 = new TlsCipher(0xC03A, Factory.none(), TlsKeyExchange::ecdhe, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_PSK_WITH_NULL_SHA384 = new TlsCipher(0xC03B, Factory.none(), TlsKeyExchange::ecdhe, TlsAuth::psk, TlsHash::sha384, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_PSK_WITH_RC4_128_SHA = new TlsCipher(0xC033, Factory.rc4128(), TlsKeyExchange::ecdhe, TlsAuth::psk, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA = new TlsCipher(0xC012, Factory.desEdeCbc(), TlsKeyExchange::ecdhe, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA = new TlsCipher(0xC013, Factory.aes128Cbc(), TlsKeyExchange::ecdhe, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 = new TlsCipher(0xC027, Factory.aes128Cbc(), TlsKeyExchange::ecdhe, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = new TlsCipher(0xC02F, Factory.aes128Gcm(), TlsKeyExchange::ecdhe, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), true);
    private static final TlsCipher TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA = new TlsCipher(0xC014, Factory.aes256Cbc(), TlsKeyExchange::ecdhe, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 = new TlsCipher(0xC028, Factory.aes256Cbc(), TlsKeyExchange::ecdhe, TlsAuth::rsa, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = new TlsCipher(0xC030, Factory.aes256Gcm(), TlsKeyExchange::ecdhe, TlsAuth::rsa, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), true);
    private static final TlsCipher TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256 = new TlsCipher(0xC04C, Factory.aria128Cbc(), TlsKeyExchange::ecdhe, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256 = new TlsCipher(0xC060, Factory.aria128Gcm(), TlsKeyExchange::ecdhe, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), true);
    private static final TlsCipher TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384 = new TlsCipher(0xC04D, Factory.aria256Cbc(), TlsKeyExchange::ecdhe, TlsAuth::rsa, TlsHash::sha384, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384 = new TlsCipher(0xC061, Factory.aria256Gcm(), TlsKeyExchange::ecdhe, TlsAuth::rsa, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), true);
    private static final TlsCipher TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = new TlsCipher(0xC076, Factory.camellia128Cbc(), TlsKeyExchange::ecdhe, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256 = new TlsCipher(0xC08A, Factory.camellia128Gcm(), TlsKeyExchange::ecdhe, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), true);
    private static final TlsCipher TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384 = new TlsCipher(0xC077, Factory.camellia256Cbc(), TlsKeyExchange::ecdhe, TlsAuth::rsa, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384 = new TlsCipher(0xC08B, Factory.camellia256Gcm(), TlsKeyExchange::ecdhe, TlsAuth::rsa, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), true);
    private static final TlsCipher TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 = new TlsCipher(0xCCA8, Factory.chacha20Poly1305(), TlsKeyExchange::ecdhe, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), true);
    private static final TlsCipher TLS_ECDHE_RSA_WITH_NULL_SHA = new TlsCipher(0xC010, Factory.none(), TlsKeyExchange::ecdhe, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDHE_RSA_WITH_RC4_128_SHA = new TlsCipher(0xC011, Factory.rc4128(), TlsKeyExchange::ecdhe, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA = new TlsCipher(0xC00D, Factory.desEdeCbc(), TlsKeyExchange::ecdh, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_RSA_WITH_AES_128_CBC_SHA = new TlsCipher(0xC00E, Factory.aes128Cbc(), TlsKeyExchange::ecdh, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 = new TlsCipher(0xC029, Factory.aes128Cbc(), TlsKeyExchange::ecdh, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 = new TlsCipher(0xC031, Factory.aes128Gcm(), TlsKeyExchange::ecdh, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_RSA_WITH_AES_256_CBC_SHA = new TlsCipher(0xC00F, Factory.aes256Cbc(), TlsKeyExchange::ecdh, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 = new TlsCipher(0xC02A, Factory.aes256Cbc(), TlsKeyExchange::ecdh, TlsAuth::rsa, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 = new TlsCipher(0xC032, Factory.aes256Gcm(), TlsKeyExchange::ecdh, TlsAuth::rsa, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256 = new TlsCipher(0xC04E, Factory.aria128Cbc(), TlsKeyExchange::ecdh, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256 = new TlsCipher(0xC062, Factory.aria128Gcm(), TlsKeyExchange::ecdh, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384 = new TlsCipher(0xC04F, Factory.aria256Cbc(), TlsKeyExchange::ecdh, TlsAuth::rsa, TlsHash::sha384, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384 = new TlsCipher(0xC063, Factory.aria256Gcm(), TlsKeyExchange::ecdh, TlsAuth::rsa, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = new TlsCipher(0xC078, Factory.camellia128Cbc(), TlsKeyExchange::ecdh, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256 = new TlsCipher(0xC08C, Factory.camellia128Gcm(), TlsKeyExchange::ecdh, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384 = new TlsCipher(0xC079, Factory.camellia256Cbc(), TlsKeyExchange::ecdh, TlsAuth::rsa, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384 = new TlsCipher(0xC08D, Factory.camellia256Gcm(), TlsKeyExchange::ecdh, TlsAuth::rsa, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_RSA_WITH_NULL_SHA = new TlsCipher(0xC00B, Factory.none(), TlsKeyExchange::ecdh, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_ECDH_RSA_WITH_RC4_128_SHA = new TlsCipher(0xC00C, Factory.rc4128(), TlsKeyExchange::ecdh, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_GOSTR341112_256_WITH_28147_CNT_IMIT = new TlsCipher(0xC102, Factory.kuznyechikCtrOmac(), TlsKeyExchange::gostr256, TlsAuth::gostr341012, TlsHash::gostr256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_GOSTR341112_256_WITH_KUZNYECHIK_CTR_OMAC = new TlsCipher(0xC100, Factory.kuznyechikCtrOmac(), TlsKeyExchange::gostr256, TlsAuth::gostr341012, TlsHash::gostr256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_L = new TlsCipher(0xC103, Factory.kuznyechikMgmL(), TlsKeyExchange::ecdhe, TlsAuth::none, TlsHash::none, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_S = new TlsCipher(0xC105, Factory.kuznyechikMgmS(), TlsKeyExchange::ecdhe, TlsAuth::none, TlsHash::none, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_GOSTR341112_256_WITH_MAGMA_CTR_OMAC = new TlsCipher(0xC101, Factory.magmaCtr(), TlsKeyExchange::gostr256, TlsAuth::gostr341012, TlsHash::gostr256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_GOSTR341112_256_WITH_MAGMA_MGM_L = new TlsCipher(0xC104, Factory.magmaMgmL(), TlsKeyExchange::ecdhe, TlsAuth::none, TlsHash::none, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_GOSTR341112_256_WITH_MAGMA_MGM_S = new TlsCipher(0xC106, Factory.magmaMgmS(), TlsKeyExchange::ecdhe, TlsAuth::none, TlsHash::none, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5 = new TlsCipher(0x0029, Factory.desCbc40(), TlsKeyExchange::krb5, TlsAuth::krb5, TlsHash::md5, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA = new TlsCipher(0x0026, Factory.desCbc40(), TlsKeyExchange::krb5, TlsAuth::krb5, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5 = new TlsCipher(0x002A, Factory.rc2Cbc40(), TlsKeyExchange::krb5, TlsAuth::krb5, TlsHash::md5, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA = new TlsCipher(0x0027, Factory.rc2Cbc40(), TlsKeyExchange::krb5, TlsAuth::krb5, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_KRB5_EXPORT_WITH_RC4_40_MD5 = new TlsCipher(0x002B, Factory.rc440(), TlsKeyExchange::krb5, TlsAuth::krb5, TlsHash::md5, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_KRB5_EXPORT_WITH_RC4_40_SHA = new TlsCipher(0x0028, Factory.rc440(), TlsKeyExchange::krb5, TlsAuth::krb5, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_KRB5_WITH_3DES_EDE_CBC_MD5 = new TlsCipher(0x0023, Factory.desEdeCbc(), TlsKeyExchange::krb5, TlsAuth::krb5, TlsHash::md5, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_KRB5_WITH_3DES_EDE_CBC_SHA = new TlsCipher(0x001F, Factory.desEdeCbc(), TlsKeyExchange::krb5, TlsAuth::krb5, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_KRB5_WITH_DES_CBC_MD5 = new TlsCipher(0x0022, Factory.desCbc(), TlsKeyExchange::krb5, TlsAuth::krb5, TlsHash::md5, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_KRB5_WITH_DES_CBC_SHA = new TlsCipher(0x001E, Factory.desCbc(), TlsKeyExchange::krb5, TlsAuth::krb5, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_KRB5_WITH_IDEA_CBC_MD5 = new TlsCipher(0x0025, Factory.ideaCbc(), TlsKeyExchange::krb5, TlsAuth::krb5, TlsHash::md5, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_KRB5_WITH_IDEA_CBC_SHA = new TlsCipher(0x0021, Factory.ideaCbc(), TlsKeyExchange::krb5, TlsAuth::krb5, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_KRB5_WITH_RC4_128_MD5 = new TlsCipher(0x0024, Factory.rc4128(), TlsKeyExchange::krb5, TlsAuth::krb5, TlsHash::md5, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_KRB5_WITH_RC4_128_SHA = new TlsCipher(0x0020, Factory.rc4128(), TlsKeyExchange::krb5, TlsAuth::krb5, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_NULL_WITH_NULL_NULL = new TlsCipher(0x0000, Factory.none(), TlsKeyExchange::none, TlsAuth::none, TlsHash::none, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_PSK_DHE_WITH_AES_128_CCM_8 = new TlsCipher(0xC0AA, Factory.aes128Ccm8(), TlsKeyExchange::dhe, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_PSK_DHE_WITH_AES_256_CCM_8 = new TlsCipher(0xC0AB, Factory.aes256Ccm8(), TlsKeyExchange::dhe, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_PSK_WITH_3DES_EDE_CBC_SHA = new TlsCipher(0x008B, Factory.desEdeCbc(), TlsKeyExchange::psk, TlsAuth::psk, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_PSK_WITH_AES_128_CBC_SHA = new TlsCipher(0x008C, Factory.aes128Cbc(), TlsKeyExchange::psk, TlsAuth::psk, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_PSK_WITH_AES_128_CBC_SHA256 = new TlsCipher(0x00AE, Factory.aes128Cbc(), TlsKeyExchange::psk, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_PSK_WITH_AES_128_CCM = new TlsCipher(0xC0A4, Factory.aes128Ccm(), TlsKeyExchange::psk, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_PSK_WITH_AES_128_CCM_8 = new TlsCipher(0xC0A8, Factory.aes128Ccm8(), TlsKeyExchange::psk, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_PSK_WITH_AES_128_GCM_SHA256 = new TlsCipher(0x00A8, Factory.aes128Gcm(), TlsKeyExchange::psk, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_PSK_WITH_AES_256_CBC_SHA = new TlsCipher(0x008D, Factory.aes256Cbc(), TlsKeyExchange::psk, TlsAuth::psk, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_PSK_WITH_AES_256_CBC_SHA384 = new TlsCipher(0x00AF, Factory.aes256Cbc(), TlsKeyExchange::psk, TlsAuth::psk, TlsHash::sha384, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_PSK_WITH_AES_256_CCM = new TlsCipher(0xC0A5, Factory.aes256Ccm(), TlsKeyExchange::psk, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_PSK_WITH_AES_256_CCM_8 = new TlsCipher(0xC0A9, Factory.aes256Ccm8(), TlsKeyExchange::psk, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_PSK_WITH_AES_256_GCM_SHA384 = new TlsCipher(0x00A9, Factory.aes256Gcm(), TlsKeyExchange::psk, TlsAuth::psk, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_PSK_WITH_ARIA_128_CBC_SHA256 = new TlsCipher(0xC064, Factory.aria128Cbc(), TlsKeyExchange::psk, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_PSK_WITH_ARIA_128_GCM_SHA256 = new TlsCipher(0xC06A, Factory.aria128Gcm(), TlsKeyExchange::psk, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_PSK_WITH_ARIA_256_CBC_SHA384 = new TlsCipher(0xC065, Factory.aria256Cbc(), TlsKeyExchange::psk, TlsAuth::psk, TlsHash::sha384, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_PSK_WITH_ARIA_256_GCM_SHA384 = new TlsCipher(0xC06B, Factory.aria256Gcm(), TlsKeyExchange::psk, TlsAuth::psk, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256 = new TlsCipher(0xC094, Factory.camellia128Cbc(), TlsKeyExchange::psk, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256 = new TlsCipher(0xC08E, Factory.camellia128Gcm(), TlsKeyExchange::psk, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384 = new TlsCipher(0xC095, Factory.camellia256Cbc(), TlsKeyExchange::psk, TlsAuth::psk, TlsHash::sha384, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384 = new TlsCipher(0xC08F, Factory.camellia256Gcm(), TlsKeyExchange::psk, TlsAuth::psk, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_PSK_WITH_CHACHA20_POLY1305_SHA256 = new TlsCipher(0xCCAB, Factory.chacha20Poly1305(), TlsKeyExchange::psk, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_PSK_WITH_NULL_SHA = new TlsCipher(0x002C, Factory.none(), TlsKeyExchange::psk, TlsAuth::psk, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_PSK_WITH_NULL_SHA256 = new TlsCipher(0x00B0, Factory.none(), TlsKeyExchange::psk, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_PSK_WITH_NULL_SHA384 = new TlsCipher(0x00B1, Factory.none(), TlsKeyExchange::psk, TlsAuth::psk, TlsHash::sha384, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_PSK_WITH_RC4_128_SHA = new TlsCipher(0x008A, Factory.rc4128(), TlsKeyExchange::psk, TlsAuth::psk, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_EXPORT_WITH_DES40_CBC_SHA = new TlsCipher(0x0008, Factory.des40Cbc(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5 = new TlsCipher(0x0006, Factory.rc2Cbc40(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::md5, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_EXPORT_WITH_RC4_40_MD5 = new TlsCipher(0x0003, Factory.rc440(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::md5, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA = new TlsCipher(0x0093, Factory.desEdeCbc(), TlsKeyExchange::rsa, TlsAuth::psk, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_PSK_WITH_AES_128_CBC_SHA = new TlsCipher(0x0094, Factory.aes128Cbc(), TlsKeyExchange::rsa, TlsAuth::psk, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_PSK_WITH_AES_128_CBC_SHA256 = new TlsCipher(0x00B6, Factory.aes128Cbc(), TlsKeyExchange::rsa, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_PSK_WITH_AES_128_GCM_SHA256 = new TlsCipher(0x00AC, Factory.aes128Gcm(), TlsKeyExchange::rsa, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_PSK_WITH_AES_256_CBC_SHA = new TlsCipher(0x0095, Factory.aes256Cbc(), TlsKeyExchange::rsa, TlsAuth::psk, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_PSK_WITH_AES_256_CBC_SHA384 = new TlsCipher(0x00B7, Factory.aes256Cbc(), TlsKeyExchange::rsa, TlsAuth::psk, TlsHash::sha384, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_PSK_WITH_AES_256_GCM_SHA384 = new TlsCipher(0x00AD, Factory.aes256Gcm(), TlsKeyExchange::rsa, TlsAuth::psk, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256 = new TlsCipher(0xC068, Factory.aria128Cbc(), TlsKeyExchange::rsa, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256 = new TlsCipher(0xC06E, Factory.aria128Gcm(), TlsKeyExchange::rsa, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384 = new TlsCipher(0xC069, Factory.aria256Cbc(), TlsKeyExchange::rsa, TlsAuth::psk, TlsHash::sha384, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384 = new TlsCipher(0xC06F, Factory.aria256Gcm(), TlsKeyExchange::rsa, TlsAuth::psk, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256 = new TlsCipher(0xC098, Factory.camellia128Cbc(), TlsKeyExchange::rsa, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256 = new TlsCipher(0xC092, Factory.camellia128Gcm(), TlsKeyExchange::rsa, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384 = new TlsCipher(0xC099, Factory.camellia256Cbc(), TlsKeyExchange::rsa, TlsAuth::psk, TlsHash::sha384, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384 = new TlsCipher(0xC093, Factory.camellia256Gcm(), TlsKeyExchange::rsa, TlsAuth::psk, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256 = new TlsCipher(0xCCAE, Factory.chacha20Poly1305(), TlsKeyExchange::rsa, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_PSK_WITH_NULL_SHA = new TlsCipher(0x002E, Factory.none(), TlsKeyExchange::rsa, TlsAuth::psk, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_PSK_WITH_NULL_SHA256 = new TlsCipher(0x00B8, Factory.none(), TlsKeyExchange::rsa, TlsAuth::psk, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_PSK_WITH_NULL_SHA384 = new TlsCipher(0x00B9, Factory.none(), TlsKeyExchange::rsa, TlsAuth::psk, TlsHash::sha384, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_PSK_WITH_RC4_128_SHA = new TlsCipher(0x0092, Factory.rc4128(), TlsKeyExchange::rsa, TlsAuth::psk, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_WITH_3DES_EDE_CBC_SHA = new TlsCipher(0x000A, Factory.desEdeCbc(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_WITH_AES_128_CBC_SHA = new TlsCipher(0x002F, Factory.aes128Cbc(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_WITH_AES_128_CBC_SHA256 = new TlsCipher(0x003C, Factory.aes128Cbc(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_WITH_AES_128_CCM = new TlsCipher(0xC09C, Factory.aes128Ccm(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_WITH_AES_128_CCM_8 = new TlsCipher(0xC0A0, Factory.aes128Ccm8(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_WITH_AES_128_GCM_SHA256 = new TlsCipher(0x009C, Factory.aes128Gcm(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_WITH_AES_256_CBC_SHA = new TlsCipher(0x0035, Factory.aes256Cbc(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_WITH_AES_256_CBC_SHA256 = new TlsCipher(0x003D, Factory.aes256Cbc(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_WITH_AES_256_CCM = new TlsCipher(0xC09D, Factory.aes256Ccm(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_WITH_AES_256_CCM_8 = new TlsCipher(0xC0A1, Factory.aes256Ccm8(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_WITH_AES_256_GCM_SHA384 = new TlsCipher(0x009D, Factory.aes256Gcm(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_WITH_ARIA_128_CBC_SHA256 = new TlsCipher(0xC03C, Factory.aria128Cbc(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_WITH_ARIA_128_GCM_SHA256 = new TlsCipher(0xC050, Factory.aria128Gcm(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_WITH_ARIA_256_CBC_SHA384 = new TlsCipher(0xC03D, Factory.aria256Cbc(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::sha384, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_WITH_ARIA_256_GCM_SHA384 = new TlsCipher(0xC051, Factory.aria256Gcm(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_WITH_CAMELLIA_128_CBC_SHA = new TlsCipher(0x0041, Factory.camellia128Cbc(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256 = new TlsCipher(0x00BA, Factory.camellia128Cbc(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256 = new TlsCipher(0xC07A, Factory.camellia128Gcm(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_WITH_CAMELLIA_256_CBC_SHA = new TlsCipher(0x0084, Factory.camellia256Cbc(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256 = new TlsCipher(0x00C0, Factory.camellia256Cbc(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384 = new TlsCipher(0xC07B, Factory.camellia256Gcm(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::sha384, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_WITH_DES_CBC_SHA = new TlsCipher(0x0009, Factory.desCbc(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_WITH_IDEA_CBC_SHA = new TlsCipher(0x0007, Factory.ideaCbc(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_WITH_NULL_MD5 = new TlsCipher(0x0001, Factory.none(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::md5, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_WITH_NULL_SHA = new TlsCipher(0x0002, Factory.none(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_WITH_NULL_SHA256 = new TlsCipher(0x003B, Factory.none(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::sha256, List.of(TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_WITH_RC4_128_MD5 = new TlsCipher(0x0004, Factory.rc4128(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::md5, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_WITH_RC4_128_SHA = new TlsCipher(0x0005, Factory.rc4128(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_RSA_WITH_SEED_CBC_SHA = new TlsCipher(0x0096, Factory.seedCbc(), TlsKeyExchange::rsa, TlsAuth::rsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_SHA256_SHA256 = new TlsCipher(0xC0B4, Factory.none(), TlsKeyExchange::none, TlsAuth::sha256, TlsHash::sha256, List.of(TlsVersion.TLS13), false);
    private static final TlsCipher TLS_SHA384_SHA384 = new TlsCipher(0xC0B5, Factory.none(), TlsKeyExchange::none, TlsAuth::sha384, TlsHash::sha384, List.of(TlsVersion.TLS13), false);
    private static final TlsCipher TLS_SM4_CCM_SM3 = new TlsCipher(0x00C7, Factory.sm4Ccm(), TlsKeyExchange::none, TlsAuth::none, TlsHash::sm3, List.of(TlsVersion.TLS13), false);
    private static final TlsCipher TLS_SM4_GCM_SM3 = new TlsCipher(0x00C6, Factory.sm4Gcm(), TlsKeyExchange::none, TlsAuth::none, TlsHash::sm3, List.of(TlsVersion.TLS13), false);
    private static final TlsCipher TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA = new TlsCipher(0xC01C, Factory.desEdeCbc(), TlsKeyExchange::srp, TlsAuth::shaDss, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA = new TlsCipher(0xC01F, Factory.aes128Cbc(), TlsKeyExchange::srp, TlsAuth::shaDss, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA = new TlsCipher(0xC022, Factory.aes256Cbc(), TlsKeyExchange::srp, TlsAuth::shaDss, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA = new TlsCipher(0xC01B, Factory.desEdeCbc(), TlsKeyExchange::srp, TlsAuth::shaRsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA = new TlsCipher(0xC01E, Factory.aes128Cbc(), TlsKeyExchange::srp, TlsAuth::shaRsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA = new TlsCipher(0xC021, Factory.aes256Cbc(), TlsKeyExchange::srp, TlsAuth::shaRsa, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA = new TlsCipher(0xC01A, Factory.desEdeCbc(), TlsKeyExchange::srp, TlsAuth::sha, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_SRP_SHA_WITH_AES_128_CBC_SHA = new TlsCipher(0xC01D, Factory.aes128Cbc(), TlsKeyExchange::srp, TlsAuth::sha, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_SRP_SHA_WITH_AES_256_CBC_SHA = new TlsCipher(0xC020, Factory.aes256Cbc(), TlsKeyExchange::srp, TlsAuth::sha, TlsHash::sha1, List.of(TlsVersion.TLS10, TlsVersion.TLS11, TlsVersion.TLS12, TlsVersion.TLS13), false);
    private static final TlsCipher TLS_GREASE_0A = new TlsCipher(0x0A0A, Factory.none(), TlsKeyExchange::none, TlsAuth::none, TlsHash::none, List.of(TlsVersion.TLS13), true);
    private static final TlsCipher TLS_GREASE_1A = new TlsCipher(0x1A1A, Factory.none(), TlsKeyExchange::none, TlsAuth::none, TlsHash::none, List.of(TlsVersion.TLS13), true);
    private static final TlsCipher TLS_GREASE_2A = new TlsCipher(0x2A2A, Factory.none(), TlsKeyExchange::none, TlsAuth::none, TlsHash::none, List.of(TlsVersion.TLS13), true);
    private static final TlsCipher TLS_GREASE_3A = new TlsCipher(0x3A3A, Factory.none(), TlsKeyExchange::none, TlsAuth::none, TlsHash::none, List.of(TlsVersion.TLS13), true);
    private static final TlsCipher TLS_GREASE_4A = new TlsCipher(0x4A4A, Factory.none(), TlsKeyExchange::none, TlsAuth::none, TlsHash::none, List.of(TlsVersion.TLS13), true);
    private static final TlsCipher TLS_GREASE_5A = new TlsCipher(0x5A5A, Factory.none(), TlsKeyExchange::none, TlsAuth::none, TlsHash::none, List.of(TlsVersion.TLS13), true);
    private static final TlsCipher TLS_GREASE_6A = new TlsCipher(0x6A6A, Factory.none(), TlsKeyExchange::none, TlsAuth::none, TlsHash::none, List.of(TlsVersion.TLS13), true);
    private static final TlsCipher TLS_GREASE_7A = new TlsCipher(0x7A7A, Factory.none(), TlsKeyExchange::none, TlsAuth::none, TlsHash::none, List.of(TlsVersion.TLS13), true);
    private static final TlsCipher TLS_GREASE_8A = new TlsCipher(0x8A8A, Factory.none(), TlsKeyExchange::none, TlsAuth::none, TlsHash::none, List.of(TlsVersion.TLS13), true);
    private static final TlsCipher TLS_GREASE_9A = new TlsCipher(0x9A9A, Factory.none(), TlsKeyExchange::none, TlsAuth::none, TlsHash::none, List.of(TlsVersion.TLS13), true);
    private static final TlsCipher TLS_GREASE_AA = new TlsCipher(0xAAAA, Factory.none(), TlsKeyExchange::none, TlsAuth::none, TlsHash::none, List.of(TlsVersion.TLS13), true);
    private static final TlsCipher TLS_GREASE_BA = new TlsCipher(0xBABA, Factory.none(), TlsKeyExchange::none, TlsAuth::none, TlsHash::none, List.of(TlsVersion.TLS13), true);
    private static final TlsCipher TLS_GREASE_CA = new TlsCipher(0xCACA, Factory.none(), TlsKeyExchange::none, TlsAuth::none, TlsHash::none, List.of(TlsVersion.TLS13), true);
    private static final TlsCipher TLS_GREASE_DA = new TlsCipher(0xDADA, Factory.none(), TlsKeyExchange::none, TlsAuth::none, TlsHash::none, List.of(TlsVersion.TLS13), true);
    private static final TlsCipher TLS_GREASE_EA = new TlsCipher(0xEAEA, Factory.none(), TlsKeyExchange::none, TlsAuth::none, TlsHash::none, List.of(TlsVersion.TLS13), true);
    private static final TlsCipher TLS_GREASE_FA = new TlsCipher(0xFAFA, Factory.none(), TlsKeyExchange::none, TlsAuth::none, TlsHash::none, List.of(TlsVersion.TLS13), true);
    private static final List<TlsCipher> TLS_GREASE = List.of(TLS_GREASE_0A, TLS_GREASE_1A, TLS_GREASE_2A, TLS_GREASE_3A, TLS_GREASE_4A, TLS_GREASE_5A, TLS_GREASE_6A, TLS_GREASE_7A, TLS_GREASE_8A, TLS_GREASE_9A, TLS_GREASE_AA, TLS_GREASE_BA, TLS_GREASE_CA, TLS_GREASE_DA, TLS_GREASE_EA, TLS_GREASE_FA);
    private final static List<TlsCipher> SECURE = List.of(
            TLS_AES_128_CCM_8_SHA256,
            TLS_AES_128_CCM_SHA256,
            TLS_ECCPWD_WITH_AES_128_CCM_SHA256,
            TLS_ECCPWD_WITH_AES_256_CCM_SHA384,
            TLS_ECDHE_ECDSA_WITH_AES_128_CCM,
            TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8,
            TLS_ECDHE_ECDSA_WITH_AES_256_CCM,
            TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8,
            TLS_ECDHE_PSK_WITH_AES_128_CCM_8_SHA256,
            TLS_ECDHE_PSK_WITH_AES_128_CCM_SHA256,
            TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
            TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
            TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256,
            TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384,
            TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256,
            TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384,
            TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
    );
    //</editor-fold>

    //<editor-fold desc="Static Accessors">
    public static TlsCipher aes128Ccm8Sha256() {
        return TLS_AES_128_CCM_8_SHA256;
    }

    public static TlsCipher aes128CcmSha256() {
        return TLS_AES_128_CCM_SHA256;
    }

    public static TlsCipher aes128GcmSha256() {
        return TLS_AES_128_GCM_SHA256;
    }

    public static TlsCipher aes256GcmSha384() {
        return TLS_AES_256_GCM_SHA384;
    }

    public static TlsCipher chacha20Poly1305Sha256() {
        return TLS_CHACHA20_POLY1305_SHA256;
    }

    public static TlsCipher dhAnonExportWithDes40CbcSha() {
        return TLS_DH_ANON_EXPORT_WITH_DES40_CBC_SHA;
    }

    public static TlsCipher dhAnonExportWithRc440Md5() {
        return TLS_DH_ANON_EXPORT_WITH_RC4_40_MD5;
    }

    public static TlsCipher dhAnonWithdesEdeCbcSha() {
        return TLS_DH_ANON_WITH_3DES_EDE_CBC_SHA;
    }

    public static TlsCipher dhAnonWithAes128CbcSha() {
        return TLS_DH_ANON_WITH_AES_128_CBC_SHA;
    }

    public static TlsCipher dhAnonWithAes128CbcSha256() {
        return TLS_DH_ANON_WITH_AES_128_CBC_SHA256;
    }

    public static TlsCipher dhAnonWithAes128GcmSha256() {
        return TLS_DH_ANON_WITH_AES_128_GCM_SHA256;
    }

    public static TlsCipher dhAnonWithAes256CbcSha() {
        return TLS_DH_ANON_WITH_AES_256_CBC_SHA;
    }

    public static TlsCipher dhAnonWithAes256CbcSha256() {
        return TLS_DH_ANON_WITH_AES_256_CBC_SHA256;
    }

    public static TlsCipher dhAnonWithAes256GcmSha384() {
        return TLS_DH_ANON_WITH_AES_256_GCM_SHA384;
    }

    public static TlsCipher dhAnonWithAria128CbcSha256() {
        return TLS_DH_ANON_WITH_ARIA_128_CBC_SHA256;
    }

    public static TlsCipher dhAnonWithAria128GcmSha256() {
        return TLS_DH_ANON_WITH_ARIA_128_GCM_SHA256;
    }

    public static TlsCipher dhAnonWithAria256CbcSha384() {
        return TLS_DH_ANON_WITH_ARIA_256_CBC_SHA384;
    }

    public static TlsCipher dhAnonWithAria256GcmSha384() {
        return TLS_DH_ANON_WITH_ARIA_256_GCM_SHA384;
    }

    public static TlsCipher dhAnonWithCamellia128CbcSha() {
        return TLS_DH_ANON_WITH_CAMELLIA_128_CBC_SHA;
    }

    public static TlsCipher dhAnonWithCamellia128CbcSha256() {
        return TLS_DH_ANON_WITH_CAMELLIA_128_CBC_SHA256;
    }

    public static TlsCipher dhAnonWithCamellia128GcmSha256() {
        return TLS_DH_ANON_WITH_CAMELLIA_128_GCM_SHA256;
    }

    public static TlsCipher dhAnonWithCamellia256CbcSha() {
        return TLS_DH_ANON_WITH_CAMELLIA_256_CBC_SHA;
    }

    public static TlsCipher dhAnonWithCamellia256CbcSha256() {
        return TLS_DH_ANON_WITH_CAMELLIA_256_CBC_SHA256;
    }

    public static TlsCipher dhAnonWithCamellia256GcmSha384() {
        return TLS_DH_ANON_WITH_CAMELLIA_256_GCM_SHA384;
    }

    public static TlsCipher dhAnonWithDesCbcSha() {
        return TLS_DH_ANON_WITH_DES_CBC_SHA;
    }

    public static TlsCipher dhAnonWithRc4128Md5() {
        return TLS_DH_ANON_WITH_RC4_128_MD5;
    }

    public static TlsCipher dhAnonWithSeedCbcSha() {
        return TLS_DH_ANON_WITH_SEED_CBC_SHA;
    }

    public static TlsCipher dhDssExportWithDes40CbcSha() {
        return TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA;
    }

    public static TlsCipher dhDssWithdesEdeCbcSha() {
        return TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA;
    }

    public static TlsCipher dhDssWithAes128CbcSha() {
        return TLS_DH_DSS_WITH_AES_128_CBC_SHA;
    }

    public static TlsCipher dhDssWithAes128CbcSha256() {
        return TLS_DH_DSS_WITH_AES_128_CBC_SHA256;
    }

    public static TlsCipher dhDssWithAes128GcmSha256() {
        return TLS_DH_DSS_WITH_AES_128_GCM_SHA256;
    }

    public static TlsCipher dhDssWithAes256CbcSha() {
        return TLS_DH_DSS_WITH_AES_256_CBC_SHA;
    }

    public static TlsCipher dhDssWithAes256CbcSha256() {
        return TLS_DH_DSS_WITH_AES_256_CBC_SHA256;
    }

    public static TlsCipher dhDssWithAes256GcmSha384() {
        return TLS_DH_DSS_WITH_AES_256_GCM_SHA384;
    }

    public static TlsCipher dhDssWithAria128CbcSha256() {
        return TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256;
    }

    public static TlsCipher dhDssWithAria128GcmSha256() {
        return TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256;
    }

    public static TlsCipher dhDssWithAria256CbcSha384() {
        return TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384;
    }

    public static TlsCipher dhDssWithAria256GcmSha384() {
        return TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384;
    }

    public static TlsCipher dhDssWithCamellia128CbcSha() {
        return TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA;
    }

    public static TlsCipher dhDssWithCamellia128CbcSha256() {
        return TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256;
    }

    public static TlsCipher dhDssWithCamellia128GcmSha256() {
        return TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256;
    }

    public static TlsCipher dhDssWithCamellia256CbcSha() {
        return TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA;
    }

    public static TlsCipher dhDssWithCamellia256CbcSha256() {
        return TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256;
    }

    public static TlsCipher dhDssWithCamellia256GcmSha384() {
        return TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384;
    }

    public static TlsCipher dhDssWithDesCbcSha() {
        return TLS_DH_DSS_WITH_DES_CBC_SHA;
    }

    public static TlsCipher dhDssWithSeedCbcSha() {
        return TLS_DH_DSS_WITH_SEED_CBC_SHA;
    }

    public static TlsCipher dheDssExportWithDes40CbcSha() {
        return TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA;
    }

    public static TlsCipher dheDssWithdesEdeCbcSha() {
        return TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA;
    }

    public static TlsCipher dheDssWithAes128CbcSha() {
        return TLS_DHE_DSS_WITH_AES_128_CBC_SHA;
    }

    public static TlsCipher dheDssWithAes128CbcSha256() {
        return TLS_DHE_DSS_WITH_AES_128_CBC_SHA256;
    }

    public static TlsCipher dheDssWithAes128GcmSha256() {
        return TLS_DHE_DSS_WITH_AES_128_GCM_SHA256;
    }

    public static TlsCipher dheDssWithAes256CbcSha() {
        return TLS_DHE_DSS_WITH_AES_256_CBC_SHA;
    }

    public static TlsCipher dheDssWithAes256CbcSha256() {
        return TLS_DHE_DSS_WITH_AES_256_CBC_SHA256;
    }

    public static TlsCipher dheDssWithAes256GcmSha384() {
        return TLS_DHE_DSS_WITH_AES_256_GCM_SHA384;
    }

    public static TlsCipher dheDssWithAria128CbcSha256() {
        return TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256;
    }

    public static TlsCipher dheDssWithAria128GcmSha256() {
        return TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256;
    }

    public static TlsCipher dheDssWithAria256CbcSha384() {
        return TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384;
    }

    public static TlsCipher dheDssWithAria256GcmSha384() {
        return TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384;
    }

    public static TlsCipher dheDssWithCamellia128CbcSha() {
        return TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA;
    }

    public static TlsCipher dheDssWithCamellia128CbcSha256() {
        return TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256;
    }

    public static TlsCipher dheDssWithCamellia128GcmSha256() {
        return TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256;
    }

    public static TlsCipher dheDssWithCamellia256CbcSha() {
        return TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA;
    }

    public static TlsCipher dheDssWithCamellia256CbcSha256() {
        return TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256;
    }

    public static TlsCipher dheDssWithCamellia256GcmSha384() {
        return TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384;
    }

    public static TlsCipher dheDssWithDesCbcSha() {
        return TLS_DHE_DSS_WITH_DES_CBC_SHA;
    }

    public static TlsCipher dheDssWithSeedCbcSha() {
        return TLS_DHE_DSS_WITH_SEED_CBC_SHA;
    }

    public static TlsCipher dhePskWithdesEdeCbcSha() {
        return TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA;
    }

    public static TlsCipher dhePskWithAes128CbcSha() {
        return TLS_DHE_PSK_WITH_AES_128_CBC_SHA;
    }

    public static TlsCipher dhePskWithAes128CbcSha256() {
        return TLS_DHE_PSK_WITH_AES_128_CBC_SHA256;
    }

    public static TlsCipher dhePskWithAes128Ccm() {
        return TLS_DHE_PSK_WITH_AES_128_CCM;
    }

    public static TlsCipher dhePskWithAes128GcmSha256() {
        return TLS_DHE_PSK_WITH_AES_128_GCM_SHA256;
    }

    public static TlsCipher dhePskWithAes256CbcSha() {
        return TLS_DHE_PSK_WITH_AES_256_CBC_SHA;
    }

    public static TlsCipher dhePskWithAes256CbcSha384() {
        return TLS_DHE_PSK_WITH_AES_256_CBC_SHA384;
    }

    public static TlsCipher dhePskWithAes256Ccm() {
        return TLS_DHE_PSK_WITH_AES_256_CCM;
    }

    public static TlsCipher dhePskWithAes256GcmSha384() {
        return TLS_DHE_PSK_WITH_AES_256_GCM_SHA384;
    }

    public static TlsCipher dhePskWithAria128CbcSha256() {
        return TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256;
    }

    public static TlsCipher dhePskWithAria128GcmSha256() {
        return TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256;
    }

    public static TlsCipher dhePskWithAria256CbcSha384() {
        return TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384;
    }

    public static TlsCipher dhePskWithAria256GcmSha384() {
        return TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384;
    }

    public static TlsCipher dhePskWithCamellia128CbcSha256() {
        return TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256;
    }

    public static TlsCipher dhePskWithCamellia128GcmSha256() {
        return TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256;
    }

    public static TlsCipher dhePskWithCamellia256CbcSha384() {
        return TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384;
    }

    public static TlsCipher dhePskWithCamellia256GcmSha384() {
        return TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384;
    }

    public static TlsCipher dhePskWithChacha20Poly1305Sha256() {
        return TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256;
    }

    public static TlsCipher dhePskWithNullSha() {
        return TLS_DHE_PSK_WITH_NULL_SHA;
    }

    public static TlsCipher dhePskWithNullSha256() {
        return TLS_DHE_PSK_WITH_NULL_SHA256;
    }

    public static TlsCipher dhePskWithNullSha384() {
        return TLS_DHE_PSK_WITH_NULL_SHA384;
    }

    public static TlsCipher dhePskWithRc4128Sha() {
        return TLS_DHE_PSK_WITH_RC4_128_SHA;
    }

    public static TlsCipher dheRsaExportWithDes40CbcSha() {
        return TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA;
    }

    public static TlsCipher dheRsaWithdesEdeCbcSha() {
        return TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA;
    }

    public static TlsCipher dheRsaWithAes128CbcSha() {
        return TLS_DHE_RSA_WITH_AES_128_CBC_SHA;
    }

    public static TlsCipher dheRsaWithAes128CbcSha256() {
        return TLS_DHE_RSA_WITH_AES_128_CBC_SHA256;
    }

    public static TlsCipher dheRsaWithAes128Ccm() {
        return TLS_DHE_RSA_WITH_AES_128_CCM;
    }

    public static TlsCipher dheRsaWithAes128Ccm8() {
        return TLS_DHE_RSA_WITH_AES_128_CCM_8;
    }

    public static TlsCipher dheRsaWithAes128GcmSha256() {
        return TLS_DHE_RSA_WITH_AES_128_GCM_SHA256;
    }

    public static TlsCipher dheRsaWithAes256CbcSha() {
        return TLS_DHE_RSA_WITH_AES_256_CBC_SHA;
    }

    public static TlsCipher dheRsaWithAes256CbcSha256() {
        return TLS_DHE_RSA_WITH_AES_256_CBC_SHA256;
    }

    public static TlsCipher dheRsaWithAes256Ccm() {
        return TLS_DHE_RSA_WITH_AES_256_CCM;
    }

    public static TlsCipher dheRsaWithAes256Ccm8() {
        return TLS_DHE_RSA_WITH_AES_256_CCM_8;
    }

    public static TlsCipher dheRsaWithAes256GcmSha384() {
        return TLS_DHE_RSA_WITH_AES_256_GCM_SHA384;
    }

    public static TlsCipher dheRsaWithAria128CbcSha256() {
        return TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256;
    }

    public static TlsCipher dheRsaWithAria128GcmSha256() {
        return TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256;
    }

    public static TlsCipher dheRsaWithAria256CbcSha384() {
        return TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384;
    }

    public static TlsCipher dheRsaWithAria256GcmSha384() {
        return TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384;
    }

    public static TlsCipher dheRsaWithCamellia128CbcSha() {
        return TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA;
    }

    public static TlsCipher dheRsaWithCamellia128CbcSha256() {
        return TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256;
    }

    public static TlsCipher dheRsaWithCamellia128GcmSha256() {
        return TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256;
    }

    public static TlsCipher dheRsaWithCamellia256CbcSha() {
        return TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA;
    }

    public static TlsCipher dheRsaWithCamellia256CbcSha256() {
        return TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256;
    }

    public static TlsCipher dheRsaWithCamellia256GcmSha384() {
        return TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384;
    }

    public static TlsCipher dheRsaWithChacha20Poly1305Sha256() {
        return TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256;
    }

    public static TlsCipher dheRsaWithDesCbcSha() {
        return TLS_DHE_RSA_WITH_DES_CBC_SHA;
    }

    public static TlsCipher dheRsaWithSeedCbcSha() {
        return TLS_DHE_RSA_WITH_SEED_CBC_SHA;
    }

    public static TlsCipher dhRsaExportWithDes40CbcSha() {
        return TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA;
    }

    public static TlsCipher dhRsaWithdesEdeCbcSha() {
        return TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA;
    }

    public static TlsCipher dhRsaWithAes128CbcSha() {
        return TLS_DH_RSA_WITH_AES_128_CBC_SHA;
    }

    public static TlsCipher dhRsaWithAes128CbcSha256() {
        return TLS_DH_RSA_WITH_AES_128_CBC_SHA256;
    }

    public static TlsCipher dhRsaWithAes128GcmSha256() {
        return TLS_DH_RSA_WITH_AES_128_GCM_SHA256;
    }

    public static TlsCipher dhRsaWithAes256CbcSha() {
        return TLS_DH_RSA_WITH_AES_256_CBC_SHA;
    }

    public static TlsCipher dhRsaWithAes256CbcSha256() {
        return TLS_DH_RSA_WITH_AES_256_CBC_SHA256;
    }

    public static TlsCipher dhRsaWithAes256GcmSha384() {
        return TLS_DH_RSA_WITH_AES_256_GCM_SHA384;
    }

    public static TlsCipher dhRsaWithAria128CbcSha256() {
        return TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256;
    }

    public static TlsCipher dhRsaWithAria128GcmSha256() {
        return TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256;
    }

    public static TlsCipher dhRsaWithAria256CbcSha384() {
        return TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384;
    }

    public static TlsCipher dhRsaWithAria256GcmSha384() {
        return TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384;
    }

    public static TlsCipher dhRsaWithCamellia128CbcSha() {
        return TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA;
    }

    public static TlsCipher dhRsaWithCamellia128CbcSha256() {
        return TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256;
    }

    public static TlsCipher dhRsaWithCamellia128GcmSha256() {
        return TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256;
    }

    public static TlsCipher dhRsaWithCamellia256CbcSha() {
        return TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA;
    }

    public static TlsCipher dhRsaWithCamellia256CbcSha256() {
        return TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256;
    }

    public static TlsCipher dhRsaWithCamellia256GcmSha384() {
        return TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384;
    }

    public static TlsCipher dhRsaWithDesCbcSha() {
        return TLS_DH_RSA_WITH_DES_CBC_SHA;
    }

    public static TlsCipher dhRsaWithSeedCbcSha() {
        return TLS_DH_RSA_WITH_SEED_CBC_SHA;
    }

    public static TlsCipher eccpwdWithAes128CcmSha256() {
        return TLS_ECCPWD_WITH_AES_128_CCM_SHA256;
    }

    public static TlsCipher eccpwdWithAes128GcmSha256() {
        return TLS_ECCPWD_WITH_AES_128_GCM_SHA256;
    }

    public static TlsCipher eccpwdWithAes256CcmSha384() {
        return TLS_ECCPWD_WITH_AES_256_CCM_SHA384;
    }

    public static TlsCipher eccpwdWithAes256GcmSha384() {
        return TLS_ECCPWD_WITH_AES_256_GCM_SHA384;
    }

    public static TlsCipher ecdhAnonWithdesEdeCbcSha() {
        return TLS_ECDH_ANON_WITH_3DES_EDE_CBC_SHA;
    }

    public static TlsCipher ecdhAnonWithAes128CbcSha() {
        return TLS_ECDH_ANON_WITH_AES_128_CBC_SHA;
    }

    public static TlsCipher ecdhAnonWithAes256CbcSha() {
        return TLS_ECDH_ANON_WITH_AES_256_CBC_SHA;
    }

    public static TlsCipher ecdhAnonWithNullSha() {
        return TLS_ECDH_ANON_WITH_NULL_SHA;
    }

    public static TlsCipher ecdhAnonWithRc4128Sha() {
        return TLS_ECDH_ANON_WITH_RC4_128_SHA;
    }

    public static TlsCipher ecdhEcdsaWithdesEdeCbcSha() {
        return TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA;
    }

    public static TlsCipher ecdhEcdsaWithAes128CbcSha() {
        return TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA;
    }

    public static TlsCipher ecdhEcdsaWithAes128CbcSha256() {
        return TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256;
    }

    public static TlsCipher ecdhEcdsaWithAes128GcmSha256() {
        return TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256;
    }

    public static TlsCipher ecdhEcdsaWithAes256CbcSha() {
        return TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA;
    }

    public static TlsCipher ecdhEcdsaWithAes256CbcSha384() {
        return TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384;
    }

    public static TlsCipher ecdhEcdsaWithAes256GcmSha384() {
        return TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384;
    }

    public static TlsCipher ecdhEcdsaWithAria128CbcSha256() {
        return TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256;
    }

    public static TlsCipher ecdhEcdsaWithAria128GcmSha256() {
        return TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256;
    }

    public static TlsCipher ecdhEcdsaWithAria256CbcSha384() {
        return TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384;
    }

    public static TlsCipher ecdhEcdsaWithAria256GcmSha384() {
        return TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384;
    }

    public static TlsCipher ecdhEcdsaWithCamellia128CbcSha256() {
        return TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256;
    }

    public static TlsCipher ecdhEcdsaWithCamellia128GcmSha256() {
        return TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256;
    }

    public static TlsCipher ecdhEcdsaWithCamellia256CbcSha384() {
        return TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384;
    }

    public static TlsCipher ecdhEcdsaWithCamellia256GcmSha384() {
        return TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384;
    }

    public static TlsCipher ecdhEcdsaWithNullSha() {
        return TLS_ECDH_ECDSA_WITH_NULL_SHA;
    }

    public static TlsCipher ecdhEcdsaWithRc4128Sha() {
        return TLS_ECDH_ECDSA_WITH_RC4_128_SHA;
    }

    public static TlsCipher ecdheEcdsaWithdesEdeCbcSha() {
        return TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA;
    }

    public static TlsCipher ecdheEcdsaWithAes128CbcSha() {
        return TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA;
    }

    public static TlsCipher ecdheEcdsaWithAes128CbcSha256() {
        return TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256;
    }

    public static TlsCipher ecdheEcdsaWithAes128Ccm() {
        return TLS_ECDHE_ECDSA_WITH_AES_128_CCM;
    }

    public static TlsCipher ecdheEcdsaWithAes128Ccm8() {
        return TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8;
    }

    public static TlsCipher ecdheEcdsaWithAes128GcmSha256() {
        return TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256;
    }

    public static TlsCipher ecdheEcdsaWithAes256CbcSha() {
        return TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA;
    }

    public static TlsCipher ecdheEcdsaWithAes256CbcSha384() {
        return TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384;
    }

    public static TlsCipher ecdheEcdsaWithAes256Ccm() {
        return TLS_ECDHE_ECDSA_WITH_AES_256_CCM;
    }

    public static TlsCipher ecdheEcdsaWithAes256Ccm8() {
        return TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8;
    }

    public static TlsCipher ecdheEcdsaWithAes256GcmSha384() {
        return TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384;
    }

    public static TlsCipher ecdheEcdsaWithAria128CbcSha256() {
        return TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256;
    }

    public static TlsCipher ecdheEcdsaWithAria128GcmSha256() {
        return TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256;
    }

    public static TlsCipher ecdheEcdsaWithAria256CbcSha384() {
        return TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384;
    }

    public static TlsCipher ecdheEcdsaWithAria256GcmSha384() {
        return TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384;
    }

    public static TlsCipher ecdheEcdsaWithCamellia128CbcSha256() {
        return TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256;
    }

    public static TlsCipher ecdheEcdsaWithCamellia128GcmSha256() {
        return TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256;
    }

    public static TlsCipher ecdheEcdsaWithCamellia256CbcSha384() {
        return TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384;
    }

    public static TlsCipher ecdheEcdsaWithCamellia256GcmSha384() {
        return TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384;
    }

    public static TlsCipher ecdheEcdsaWithChacha20Poly1305Sha256() {
        return TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256;
    }

    public static TlsCipher ecdheEcdsaWithNullSha() {
        return TLS_ECDHE_ECDSA_WITH_NULL_SHA;
    }

    public static TlsCipher ecdheEcdsaWithRc4128Sha() {
        return TLS_ECDHE_ECDSA_WITH_RC4_128_SHA;
    }

    public static TlsCipher ecdhePskWithdesEdeCbcSha() {
        return TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA;
    }

    public static TlsCipher ecdhePskWithAes128CbcSha() {
        return TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA;
    }

    public static TlsCipher ecdhePskWithAes128CbcSha256() {
        return TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256;
    }

    public static TlsCipher ecdhePskWithAes128Ccm8Sha256() {
        return TLS_ECDHE_PSK_WITH_AES_128_CCM_8_SHA256;
    }

    public static TlsCipher ecdhePskWithAes128CcmSha256() {
        return TLS_ECDHE_PSK_WITH_AES_128_CCM_SHA256;
    }

    public static TlsCipher ecdhePskWithAes128GcmSha256() {
        return TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256;
    }

    public static TlsCipher ecdhePskWithAes256CbcSha() {
        return TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA;
    }

    public static TlsCipher ecdhePskWithAes256CbcSha384() {
        return TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384;
    }

    public static TlsCipher ecdhePskWithAes256GcmSha384() {
        return TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384;
    }

    public static TlsCipher ecdhePskWithAria128CbcSha256() {
        return TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256;
    }

    public static TlsCipher ecdhePskWithAria256CbcSha384() {
        return TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384;
    }

    public static TlsCipher ecdhePskWithCamellia128CbcSha256() {
        return TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256;
    }

    public static TlsCipher ecdhePskWithCamellia256CbcSha384() {
        return TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384;
    }

    public static TlsCipher ecdhePskWithChacha20Poly1305Sha256() {
        return TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256;
    }

    public static TlsCipher ecdhePskWithNullSha() {
        return TLS_ECDHE_PSK_WITH_NULL_SHA;
    }

    public static TlsCipher ecdhePskWithNullSha256() {
        return TLS_ECDHE_PSK_WITH_NULL_SHA256;
    }

    public static TlsCipher ecdhePskWithNullSha384() {
        return TLS_ECDHE_PSK_WITH_NULL_SHA384;
    }

    public static TlsCipher ecdhePskWithRc4128Sha() {
        return TLS_ECDHE_PSK_WITH_RC4_128_SHA;
    }

    public static TlsCipher ecdheRsaWithdesEdeCbcSha() {
        return TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA;
    }

    public static TlsCipher ecdheRsaWithAes128CbcSha() {
        return TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA;
    }

    public static TlsCipher ecdheRsaWithAes128CbcSha256() {
        return TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256;
    }

    public static TlsCipher ecdheRsaWithAes128GcmSha256() {
        return TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256;
    }

    public static TlsCipher ecdheRsaWithAes256CbcSha() {
        return TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA;
    }

    public static TlsCipher ecdheRsaWithAes256CbcSha384() {
        return TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384;
    }

    public static TlsCipher ecdheRsaWithAes256GcmSha384() {
        return TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384;
    }

    public static TlsCipher ecdheRsaWithAria128CbcSha256() {
        return TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256;
    }

    public static TlsCipher ecdheRsaWithAria128GcmSha256() {
        return TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256;
    }

    public static TlsCipher ecdheRsaWithAria256CbcSha384() {
        return TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384;
    }

    public static TlsCipher ecdheRsaWithAria256GcmSha384() {
        return TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384;
    }

    public static TlsCipher ecdheRsaWithCamellia128CbcSha256() {
        return TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256;
    }

    public static TlsCipher ecdheRsaWithCamellia128GcmSha256() {
        return TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256;
    }

    public static TlsCipher ecdheRsaWithCamellia256CbcSha384() {
        return TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384;
    }

    public static TlsCipher ecdheRsaWithCamellia256GcmSha384() {
        return TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384;
    }

    public static TlsCipher ecdheRsaWithChacha20Poly1305Sha256() {
        return TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256;
    }

    public static TlsCipher ecdheRsaWithNullSha() {
        return TLS_ECDHE_RSA_WITH_NULL_SHA;
    }

    public static TlsCipher ecdheRsaWithRc4128Sha() {
        return TLS_ECDHE_RSA_WITH_RC4_128_SHA;
    }

    public static TlsCipher ecdhRsaWithdesEdeCbcSha() {
        return TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA;
    }

    public static TlsCipher ecdhRsaWithAes128CbcSha() {
        return TLS_ECDH_RSA_WITH_AES_128_CBC_SHA;
    }

    public static TlsCipher ecdhRsaWithAes128CbcSha256() {
        return TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256;
    }

    public static TlsCipher ecdhRsaWithAes128GcmSha256() {
        return TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256;
    }

    public static TlsCipher ecdhRsaWithAes256CbcSha() {
        return TLS_ECDH_RSA_WITH_AES_256_CBC_SHA;
    }

    public static TlsCipher ecdhRsaWithAes256CbcSha384() {
        return TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384;
    }

    public static TlsCipher ecdhRsaWithAes256GcmSha384() {
        return TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384;
    }

    public static TlsCipher ecdhRsaWithAria128CbcSha256() {
        return TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256;
    }

    public static TlsCipher ecdhRsaWithAria128GcmSha256() {
        return TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256;
    }

    public static TlsCipher ecdhRsaWithAria256CbcSha384() {
        return TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384;
    }

    public static TlsCipher ecdhRsaWithAria256GcmSha384() {
        return TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384;
    }

    public static TlsCipher ecdhRsaWithCamellia128CbcSha256() {
        return TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256;
    }

    public static TlsCipher ecdhRsaWithCamellia128GcmSha256() {
        return TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256;
    }

    public static TlsCipher ecdhRsaWithCamellia256CbcSha384() {
        return TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384;
    }

    public static TlsCipher ecdhRsaWithCamellia256GcmSha384() {
        return TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384;
    }

    public static TlsCipher ecdhRsaWithNullSha() {
        return TLS_ECDH_RSA_WITH_NULL_SHA;
    }

    public static TlsCipher ecdhRsaWithRc4128Sha() {
        return TLS_ECDH_RSA_WITH_RC4_128_SHA;
    }

    public static TlsCipher gostr256256With28147CntImit() {
        return TLS_GOSTR341112_256_WITH_28147_CNT_IMIT;
    }

    public static TlsCipher gostr256256WithKuznyechikCtrOmac() {
        return TLS_GOSTR341112_256_WITH_KUZNYECHIK_CTR_OMAC;
    }

    public static TlsCipher gostr256256WithKuznyechikMgmL() {
        return TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_L;
    }

    public static TlsCipher gostr256256WithKuznyechikMgmS() {
        return TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_S;
    }

    public static TlsCipher gostr256256WithMagmaCtrOmac() {
        return TLS_GOSTR341112_256_WITH_MAGMA_CTR_OMAC;
    }

    public static TlsCipher gostr256256WithMagmaMgmL() {
        return TLS_GOSTR341112_256_WITH_MAGMA_MGM_L;
    }

    public static TlsCipher gostr256256WithMagmaMgmS() {
        return TLS_GOSTR341112_256_WITH_MAGMA_MGM_S;
    }

    public static TlsCipher krb5ExportWithDesCbc40Md5() {
        return TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5;
    }

    public static TlsCipher krb5ExportWithDesCbc40Sha() {
        return TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA;
    }

    public static TlsCipher krb5ExportWithRc2Cbc40Md5() {
        return TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5;
    }

    public static TlsCipher krb5ExportWithRc2Cbc40Sha() {
        return TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA;
    }

    public static TlsCipher krb5ExportWithRc440Md5() {
        return TLS_KRB5_EXPORT_WITH_RC4_40_MD5;
    }

    public static TlsCipher krb5ExportWithRc440Sha() {
        return TLS_KRB5_EXPORT_WITH_RC4_40_SHA;
    }

    public static TlsCipher krb5WithdesEdeCbcMd5() {
        return TLS_KRB5_WITH_3DES_EDE_CBC_MD5;
    }

    public static TlsCipher krb5WithdesEdeCbcSha() {
        return TLS_KRB5_WITH_3DES_EDE_CBC_SHA;
    }

    public static TlsCipher krb5WithDesCbcMd5() {
        return TLS_KRB5_WITH_DES_CBC_MD5;
    }

    public static TlsCipher krb5WithDesCbcSha() {
        return TLS_KRB5_WITH_DES_CBC_SHA;
    }

    public static TlsCipher krb5WithIdeaCbcMd5() {
        return TLS_KRB5_WITH_IDEA_CBC_MD5;
    }

    public static TlsCipher krb5WithIdeaCbcSha() {
        return TLS_KRB5_WITH_IDEA_CBC_SHA;
    }

    public static TlsCipher krb5WithRc4128Md5() {
        return TLS_KRB5_WITH_RC4_128_MD5;
    }

    public static TlsCipher krb5WithRc4128Sha() {
        return TLS_KRB5_WITH_RC4_128_SHA;
    }

    public static TlsCipher nullWithNullNull() {
        return TLS_NULL_WITH_NULL_NULL;
    }

    public static TlsCipher pskDheWithAes128Ccm8() {
        return TLS_PSK_DHE_WITH_AES_128_CCM_8;
    }

    public static TlsCipher pskDheWithAes256Ccm8() {
        return TLS_PSK_DHE_WITH_AES_256_CCM_8;
    }

    public static TlsCipher pskWithdesEdeCbcSha() {
        return TLS_PSK_WITH_3DES_EDE_CBC_SHA;
    }

    public static TlsCipher pskWithAes128CbcSha() {
        return TLS_PSK_WITH_AES_128_CBC_SHA;
    }

    public static TlsCipher pskWithAes128CbcSha256() {
        return TLS_PSK_WITH_AES_128_CBC_SHA256;
    }

    public static TlsCipher pskWithAes128Ccm() {
        return TLS_PSK_WITH_AES_128_CCM;
    }

    public static TlsCipher pskWithAes128Ccm8() {
        return TLS_PSK_WITH_AES_128_CCM_8;
    }

    public static TlsCipher pskWithAes128GcmSha256() {
        return TLS_PSK_WITH_AES_128_GCM_SHA256;
    }

    public static TlsCipher pskWithAes256CbcSha() {
        return TLS_PSK_WITH_AES_256_CBC_SHA;
    }

    public static TlsCipher pskWithAes256CbcSha384() {
        return TLS_PSK_WITH_AES_256_CBC_SHA384;
    }

    public static TlsCipher pskWithAes256Ccm() {
        return TLS_PSK_WITH_AES_256_CCM;
    }

    public static TlsCipher pskWithAes256Ccm8() {
        return TLS_PSK_WITH_AES_256_CCM_8;
    }

    public static TlsCipher pskWithAes256GcmSha384() {
        return TLS_PSK_WITH_AES_256_GCM_SHA384;
    }

    public static TlsCipher pskWithAria128CbcSha256() {
        return TLS_PSK_WITH_ARIA_128_CBC_SHA256;
    }

    public static TlsCipher pskWithAria128GcmSha256() {
        return TLS_PSK_WITH_ARIA_128_GCM_SHA256;
    }

    public static TlsCipher pskWithAria256CbcSha384() {
        return TLS_PSK_WITH_ARIA_256_CBC_SHA384;
    }

    public static TlsCipher pskWithAria256GcmSha384() {
        return TLS_PSK_WITH_ARIA_256_GCM_SHA384;
    }

    public static TlsCipher pskWithCamellia128CbcSha256() {
        return TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256;
    }

    public static TlsCipher pskWithCamellia128GcmSha256() {
        return TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256;
    }

    public static TlsCipher pskWithCamellia256CbcSha384() {
        return TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384;
    }

    public static TlsCipher pskWithCamellia256GcmSha384() {
        return TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384;
    }

    public static TlsCipher pskWithChacha20Poly1305Sha256() {
        return TLS_PSK_WITH_CHACHA20_POLY1305_SHA256;
    }

    public static TlsCipher pskWithNullSha() {
        return TLS_PSK_WITH_NULL_SHA;
    }

    public static TlsCipher pskWithNullSha256() {
        return TLS_PSK_WITH_NULL_SHA256;
    }

    public static TlsCipher pskWithNullSha384() {
        return TLS_PSK_WITH_NULL_SHA384;
    }

    public static TlsCipher pskWithRc4128Sha() {
        return TLS_PSK_WITH_RC4_128_SHA;
    }

    public static TlsCipher rsaExportWithDes40CbcSha() {
        return TLS_RSA_EXPORT_WITH_DES40_CBC_SHA;
    }

    public static TlsCipher rsaExportWithRc2Cbc40Md5() {
        return TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5;
    }

    public static TlsCipher rsaExportWithRc440Md5() {
        return TLS_RSA_EXPORT_WITH_RC4_40_MD5;
    }

    public static TlsCipher rsaPskWithdesEdeCbcSha() {
        return TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA;
    }

    public static TlsCipher rsaPskWithAes128CbcSha() {
        return TLS_RSA_PSK_WITH_AES_128_CBC_SHA;
    }

    public static TlsCipher rsaPskWithAes128CbcSha256() {
        return TLS_RSA_PSK_WITH_AES_128_CBC_SHA256;
    }

    public static TlsCipher rsaPskWithAes128GcmSha256() {
        return TLS_RSA_PSK_WITH_AES_128_GCM_SHA256;
    }

    public static TlsCipher rsaPskWithAes256CbcSha() {
        return TLS_RSA_PSK_WITH_AES_256_CBC_SHA;
    }

    public static TlsCipher rsaPskWithAes256CbcSha384() {
        return TLS_RSA_PSK_WITH_AES_256_CBC_SHA384;
    }

    public static TlsCipher rsaPskWithAes256GcmSha384() {
        return TLS_RSA_PSK_WITH_AES_256_GCM_SHA384;
    }

    public static TlsCipher rsaPskWithAria128CbcSha256() {
        return TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256;
    }

    public static TlsCipher rsaPskWithAria128GcmSha256() {
        return TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256;
    }

    public static TlsCipher rsaPskWithAria256CbcSha384() {
        return TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384;
    }

    public static TlsCipher rsaPskWithAria256GcmSha384() {
        return TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384;
    }

    public static TlsCipher rsaPskWithCamellia128CbcSha256() {
        return TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256;
    }

    public static TlsCipher rsaPskWithCamellia128GcmSha256() {
        return TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256;
    }

    public static TlsCipher rsaPskWithCamellia256CbcSha384() {
        return TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384;
    }

    public static TlsCipher rsaPskWithCamellia256GcmSha384() {
        return TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384;
    }

    public static TlsCipher rsaPskWithChacha20Poly1305Sha256() {
        return TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256;
    }

    public static TlsCipher rsaPskWithNullSha() {
        return TLS_RSA_PSK_WITH_NULL_SHA;
    }

    public static TlsCipher rsaPskWithNullSha256() {
        return TLS_RSA_PSK_WITH_NULL_SHA256;
    }

    public static TlsCipher rsaPskWithNullSha384() {
        return TLS_RSA_PSK_WITH_NULL_SHA384;
    }

    public static TlsCipher rsaPskWithRc4128Sha() {
        return TLS_RSA_PSK_WITH_RC4_128_SHA;
    }

    public static TlsCipher rsaWithdesEdeCbcSha() {
        return TLS_RSA_WITH_3DES_EDE_CBC_SHA;
    }

    public static TlsCipher rsaWithAes128CbcSha() {
        return TLS_RSA_WITH_AES_128_CBC_SHA;
    }

    public static TlsCipher rsaWithAes128CbcSha256() {
        return TLS_RSA_WITH_AES_128_CBC_SHA256;
    }

    public static TlsCipher rsaWithAes128Ccm() {
        return TLS_RSA_WITH_AES_128_CCM;
    }

    public static TlsCipher rsaWithAes128Ccm8() {
        return TLS_RSA_WITH_AES_128_CCM_8;
    }

    public static TlsCipher rsaWithAes128GcmSha256() {
        return TLS_RSA_WITH_AES_128_GCM_SHA256;
    }

    public static TlsCipher rsaWithAes256CbcSha() {
        return TLS_RSA_WITH_AES_256_CBC_SHA;
    }

    public static TlsCipher rsaWithAes256CbcSha256() {
        return TLS_RSA_WITH_AES_256_CBC_SHA256;
    }

    public static TlsCipher rsaWithAes256Ccm() {
        return TLS_RSA_WITH_AES_256_CCM;
    }

    public static TlsCipher rsaWithAes256Ccm8() {
        return TLS_RSA_WITH_AES_256_CCM_8;
    }

    public static TlsCipher rsaWithAes256GcmSha384() {
        return TLS_RSA_WITH_AES_256_GCM_SHA384;
    }

    public static TlsCipher rsaWithAria128CbcSha256() {
        return TLS_RSA_WITH_ARIA_128_CBC_SHA256;
    }

    public static TlsCipher rsaWithAria128GcmSha256() {
        return TLS_RSA_WITH_ARIA_128_GCM_SHA256;
    }

    public static TlsCipher rsaWithAria256CbcSha384() {
        return TLS_RSA_WITH_ARIA_256_CBC_SHA384;
    }

    public static TlsCipher rsaWithAria256GcmSha384() {
        return TLS_RSA_WITH_ARIA_256_GCM_SHA384;
    }

    public static TlsCipher rsaWithCamellia128CbcSha() {
        return TLS_RSA_WITH_CAMELLIA_128_CBC_SHA;
    }

    public static TlsCipher rsaWithCamellia128CbcSha256() {
        return TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256;
    }

    public static TlsCipher rsaWithCamellia128GcmSha256() {
        return TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256;
    }

    public static TlsCipher rsaWithCamellia256CbcSha() {
        return TLS_RSA_WITH_CAMELLIA_256_CBC_SHA;
    }

    public static TlsCipher rsaWithCamellia256CbcSha256() {
        return TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256;
    }

    public static TlsCipher rsaWithCamellia256GcmSha384() {
        return TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384;
    }

    public static TlsCipher rsaWithDesCbcSha() {
        return TLS_RSA_WITH_DES_CBC_SHA;
    }

    public static TlsCipher rsaWithIdeaCbcSha() {
        return TLS_RSA_WITH_IDEA_CBC_SHA;
    }

    public static TlsCipher rsaWithNullMd5() {
        return TLS_RSA_WITH_NULL_MD5;
    }

    public static TlsCipher rsaWithNullSha() {
        return TLS_RSA_WITH_NULL_SHA;
    }

    public static TlsCipher rsaWithNullSha256() {
        return TLS_RSA_WITH_NULL_SHA256;
    }

    public static TlsCipher rsaWithRc4128Md5() {
        return TLS_RSA_WITH_RC4_128_MD5;
    }

    public static TlsCipher rsaWithRc4128Sha() {
        return TLS_RSA_WITH_RC4_128_SHA;
    }

    public static TlsCipher rsaWithSeedCbcSha() {
        return TLS_RSA_WITH_SEED_CBC_SHA;
    }

    public static TlsCipher sha256Sha256() {
        return TLS_SHA256_SHA256;
    }

    public static TlsCipher sha384Sha384() {
        return TLS_SHA384_SHA384;
    }

    public static TlsCipher sm4CcmSm3() {
        return TLS_SM4_CCM_SM3;
    }

    public static TlsCipher sm4GcmSm3() {
        return TLS_SM4_GCM_SM3;
    }

    public static TlsCipher srpShaDssWithdesEdeCbcSha() {
        return TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA;
    }

    public static TlsCipher srpShaDssWithAes128CbcSha() {
        return TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA;
    }

    public static TlsCipher srpShaDssWithAes256CbcSha() {
        return TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA;
    }

    public static TlsCipher srpShaRsaWithdesEdeCbcSha() {
        return TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA;
    }

    public static TlsCipher srpShaRsaWithAes128CbcSha() {
        return TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA;
    }

    public static TlsCipher srpShaRsaWithAes256CbcSha() {
        return TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA;
    }

    public static TlsCipher srpShaWithdesEdeCbcSha() {
        return TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA;
    }

    public static TlsCipher srpShaWithAes128CbcSha() {
        return TLS_SRP_SHA_WITH_AES_128_CBC_SHA;
    }

    public static TlsCipher srpShaWithAes256CbcSha() {
        return TLS_SRP_SHA_WITH_AES_256_CBC_SHA;
    }

    public static TlsCipher grease0A() {
        return TLS_GREASE_0A;
    }

    public static TlsCipher grease1A() {
        return TLS_GREASE_1A;
    }

    public static TlsCipher grease2A() {
        return TLS_GREASE_2A;
    }

    public static TlsCipher grease3A() {
        return TLS_GREASE_3A;
    }

    public static TlsCipher grease4A() {
        return TLS_GREASE_4A;
    }

    public static TlsCipher grease5A() {
        return TLS_GREASE_5A;
    }

    public static TlsCipher grease6A() {
        return TLS_GREASE_6A;
    }

    public static TlsCipher grease7A() {
        return TLS_GREASE_7A;
    }

    public static TlsCipher grease8A() {
        return TLS_GREASE_8A;
    }

    public static TlsCipher grease9A() {
        return TLS_GREASE_9A;
    }

    public static TlsCipher greaseAA() {
        return TLS_GREASE_AA;
    }

    public static TlsCipher greaseBA() {
        return TLS_GREASE_BA;
    }

    public static TlsCipher greaseCA() {
        return TLS_GREASE_CA;
    }

    public static TlsCipher greaseDA() {
        return TLS_GREASE_DA;
    }

    public static TlsCipher greaseEA() {
        return TLS_GREASE_EA;
    }

    public static TlsCipher greaseFA() {
        return TLS_GREASE_FA;
    }

    public static List<TlsCipher> grease() {
        return TLS_GREASE;
    }

    public static List<TlsCipher> secureCiphers() {
        return SECURE;
    }

    public static TlsCipher reservedForPrivateUse(int id, Factory engine, Supplier<TlsKeyExchange> keyExchange, Supplier<TlsAuth> auth, Supplier<TlsHash> hash, List<TlsVersion> versions, boolean secure) {
        if(id >>> 8 != 0xFF) {
            throw new TlsException(
                    "Only values from 0xFF00-0xFFFF inclusive are reserved for Private Use",
                    URI.create("https://www.iana.org/assignments/tls-parameters/tls-parameters-4.csv")
            );
        }

        return new TlsCipher(id, engine, keyExchange, auth, hash, versions, secure);
    }
    //</editor-fold>

    private final int id;
    private final Supplier<TlsKeyExchange> keyExchange;
    private final Supplier<TlsAuth> auth;
    private final Factory engine;
    private final Supplier<TlsHash> hash;
    private final List<TlsVersion> versions;
    private final boolean secure;
    private TlsCipher(int id, Factory engine, Supplier<TlsKeyExchange> keyExchange, Supplier<TlsAuth> auth, Supplier<TlsHash> hash, List<TlsVersion> versions, boolean secure) {
        this.id = id;
        this.keyExchange = keyExchange;
        this.auth = auth;
        this.engine = engine;
        this.hash = hash;
        this.versions = versions;
        this.secure = secure;
    }

    public int id() {
        return id;
    }

    public Supplier<TlsKeyExchange> keyExchangeSupplier() {
        return keyExchange;
    }

    public Supplier<TlsAuth> authSupplier() {
        return auth;
    }

    public Factory factory() {
        return engine;
    }

    public Supplier<TlsHash> hashSupplier() {
        return hash;
    }

    public List<TlsVersion> versions() {
        return versions;
    }

    public boolean secure() {
        return secure;
    }

    @Override
    public boolean equals(Object obj) {
        return obj == this || obj instanceof TlsCipher that && this.id == that.id;
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    @Override
    public String toString() {
        return "TlsCipher{" +
                "id=" + id +
                ", keyExchange=" + keyExchange +
                ", auth=" + auth +
                ", engine=" + engine +
                ", hashType=" + hash +
                ", versions=" + versions +
                ", secure=" + secure +
                '}';
    }

    public final static class Factory {
        private static final Factory NONE = new Factory(0, 0, 0, 0, null, TlsCipherEngine::none, TlsCipherMode::none);
        private static final Factory AES_128_CBC = new Factory(16, 0, 16, 0, null, TlsCipherEngine::aes128, TlsCipherMode::cbc);
        private static final Factory AES_128_CCM = new Factory(16, 0, 12, 4, null, TlsCipherEngine::aes128, TlsCipherMode::ccm);
        private static final Factory AES_128_CCM_8 = new Factory(16, 0, 12, 4, null, TlsCipherEngine::aes128, TlsCipherMode::ccm8);
        private static final Factory AES_128_GCM = new Factory(16, 16, 12, 4, null, TlsCipherEngine::aes128, TlsCipherMode::gcm);
        private static final Factory AES_256_CBC = new Factory(32, 0, 16, 0, null, TlsCipherEngine::aes256, TlsCipherMode::cbc);
        private static final Factory AES_256_CCM = new Factory(32, 0, 12, 4, null, TlsCipherEngine::aes256, TlsCipherMode::ccm);
        private static final Factory AES_256_CCM_8 = new Factory(32, 0, 12, 4, null, TlsCipherEngine::aes256, TlsCipherMode::ccm8);
        private static final Factory AES_256_GCM = new Factory(32, 16, 12, 4, null, TlsCipherEngine::aes256, TlsCipherMode::gcm);
        private static final Factory ARIA_128_CBC = new Factory(16, 0, 16, 0, null, TlsCipherEngine::aria128, TlsCipherMode::cbc);
        private static final Factory ARIA_128_GCM = new Factory(16, 16, 12, 4, null, TlsCipherEngine::aria128, TlsCipherMode::gcm);
        private static final Factory ARIA_256_CBC = new Factory(32, 0, 16, 0, null, TlsCipherEngine::aria256, TlsCipherMode::cbc);
        private static final Factory ARIA_256_GCM = new Factory(32, 16, 12, 4, null, TlsCipherEngine::aria256, TlsCipherMode::gcm);
        private static final Factory CAMELLIA_128_CBC = new Factory(16, 0, 16, 0, null, TlsCipherEngine::camellia128, TlsCipherMode::cbc);
        private static final Factory CAMELLIA_128_GCM = new Factory(16, 16, 12, 4, null, TlsCipherEngine::camellia128, TlsCipherMode::gcm);
        private static final Factory CAMELLIA_256_CBC = new Factory(32, 0, 16, 0, null, TlsCipherEngine::camellia256, TlsCipherMode::cbc);
        private static final Factory CAMELLIA_256_GCM = new Factory(32, 16, 12, 4, null, TlsCipherEngine::camellia256, TlsCipherMode::gcm);
        private static final Factory CHACHA20_POLY1305 = new Factory(32, 0, 12, 12, null, TlsCipherEngine::chacha20, TlsCipherMode::poly1305);
        private static final Factory DES_40_CBC = new Factory(5, 0, 8, 0, 7, TlsCipherEngine::des40, TlsCipherMode::cbc);
        private static final Factory DES_CBC = new Factory(7, 0, 8, 0, null, TlsCipherEngine::des, TlsCipherMode::cbc);
        private static final Factory DES_CBC_40 = new Factory(5, 0, 8, 0, 7, TlsCipherEngine::des40, TlsCipherMode::cbc40);
        private static final Factory IDEA_CBC = new Factory(16, 0, 8, 0, null, TlsCipherEngine::idea, TlsCipherMode::cbc);
        private static final Factory KUZNYECHIK_CTR_OMAC = new Factory(32, 0, 16, 4, null, TlsCipherEngine::kuznyechik, TlsCipherMode::ctr);
        private static final Factory KUZNYECHIK_MGM_L = new Factory(32, 0, 12, 4, null, TlsCipherEngine::kuznyechik, TlsCipherMode::mgmLight);
        private static final Factory KUZNYECHIK_MGM_S = new Factory(32, 0, 12, 4, null, TlsCipherEngine::kuznyechik, TlsCipherMode::mgmStrong);
        private static final Factory MAGMA_CTR = new Factory(32, 0, 8, 4, null, TlsCipherEngine::magma, TlsCipherMode::ctr);
        private static final Factory MAGMA_MGM_L = new Factory(32, 0, 12, 4, null, TlsCipherEngine::magma, TlsCipherMode::mgmLight);
        private static final Factory MAGMA_MGM_S = new Factory(32, 0, 12, 4, null, TlsCipherEngine::magma, TlsCipherMode::mgmStrong);
        private static final Factory RC2_CBC_40 = new Factory(5, 0, 8, 0, 16, TlsCipherEngine::rc2, TlsCipherMode::cbc40);
        private static final Factory RC4_128 = new Factory(16, 0, 0, 0, null, TlsCipherEngine::rc4, TlsCipherMode::ctr);
        private static final Factory RC4_40 = new Factory(5, 0, 0, 0, 16, TlsCipherEngine::rc4, TlsCipherMode::ctr); // TODO: Shrink
        private static final Factory SEED_CBC = new Factory(16, 0, 16, 0, null, TlsCipherEngine::seed, TlsCipherMode::cbc);
        private static final Factory SM4_CCM = new Factory(16, 0, 12, 4, null, TlsCipherEngine::sm4, TlsCipherMode::ccm);
        private static final Factory SM4_GCM = new Factory(16, 16, 12, 4, null, TlsCipherEngine::sm4, TlsCipherMode::gcm);
        private static final Factory DES_EDE_CBC = new Factory(21, 0, 8, 0, null, TlsCipherEngine::desEde, TlsCipherMode::cbc);

        public static Factory none() {
            return NONE;
        }

        public static Factory aes128Cbc() {
            return AES_128_CBC;
        }

        public static Factory aes128Ccm() {
            return AES_128_CCM;
        }

        public static Factory aes128Ccm8() {
            return AES_128_CCM_8;
        }

        public static Factory aes128Gcm() {
            return AES_128_GCM;
        }

        public static Factory aes256Cbc() {
            return AES_256_CBC;
        }

        public static Factory aes256Ccm() {
            return AES_256_CCM;
        }

        public static Factory aes256Ccm8() {
            return AES_256_CCM_8;
        }

        public static Factory aes256Gcm() {
            return AES_256_GCM;
        }

        public static Factory aria128Cbc() {
            return ARIA_128_CBC;
        }

        public static Factory aria128Gcm() {
            return ARIA_128_GCM;
        }

        public static Factory aria256Cbc() {
            return ARIA_256_CBC;
        }

        public static Factory aria256Gcm() {
            return ARIA_256_GCM;
        }

        public static Factory camellia128Cbc() {
            return CAMELLIA_128_CBC;
        }

        public static Factory camellia128Gcm() {
            return CAMELLIA_128_GCM;
        }

        public static Factory camellia256Cbc() {
            return CAMELLIA_256_CBC;
        }

        public static Factory camellia256Gcm() {
            return CAMELLIA_256_GCM;
        }

        public static Factory chacha20Poly1305() {
            return CHACHA20_POLY1305;
        }

        public static Factory des40Cbc() {
            return DES_40_CBC;
        }

        public static Factory desCbc() {
            return DES_CBC;
        }

        public static Factory desCbc40() {
            return DES_CBC_40;
        }

        public static Factory ideaCbc() {
            return IDEA_CBC;
        }

        public static Factory kuznyechikCtrOmac() {
            return KUZNYECHIK_CTR_OMAC;
        }

        public static Factory kuznyechikMgmL() {
            return KUZNYECHIK_MGM_L;
        }

        public static Factory kuznyechikMgmS() {
            return KUZNYECHIK_MGM_S;
        }

        public static Factory magmaCtr() {
            return MAGMA_CTR;
        }

        public static Factory magmaMgmL() {
            return MAGMA_MGM_L;
        }

        public static Factory magmaMgmS() {
            return MAGMA_MGM_S;
        }

        public static Factory rc2Cbc40() {
            return RC2_CBC_40;
        }

        public static Factory rc4128() {
            return RC4_128;
        }

        public static Factory rc440() {
            return RC4_40;
        }

        public static Factory seedCbc() {
            return SEED_CBC;
        }

        public static Factory sm4Ccm() {
            return SM4_CCM;
        }

        public static Factory sm4Gcm() {
            return SM4_GCM;
        }

        public static Factory desEdeCbc() {
            return DES_EDE_CBC;
        }

        public static Factory of(int cipherKeyLength, int tagLength, int ivLength, int fixedIvLength, Integer expandedKeyLength, Supplier<TlsCipherEngine> engine, Supplier<TlsCipherMode> mode) {
            return new Factory(cipherKeyLength, tagLength, ivLength, fixedIvLength, expandedKeyLength, engine, mode);
        }

        private final int cipherKeyLength;
        private final int tagLength;
        private final int ivLength;
        private final Integer expandedKeyLength;
        private final int fixedIvLength;
        private final Supplier<TlsCipherEngine> engine;
        private final Supplier<TlsCipherMode> mode;
        private Factory(int cipherKeyLength, int tagLength, int ivLength, int fixedIvLength, Integer expandedKeyLength, Supplier<TlsCipherEngine> engine, Supplier<TlsCipherMode> mode) {
            this.cipherKeyLength = cipherKeyLength;
            this.tagLength = tagLength;
            this.ivLength = ivLength;
            this.fixedIvLength = fixedIvLength;
            this.expandedKeyLength = expandedKeyLength;
            this.mode = mode;
            this.engine = engine;
        }

        public int tagLength() {
            return tagLength;
        }

        public int cipherKeyLength() {
            return cipherKeyLength;
        }

        public int ivLength() {
            return ivLength;
        }

        public OptionalInt expandedKeyLength() {
            return expandedKeyLength == null ? OptionalInt.empty() : OptionalInt.of(expandedKeyLength);
        }

        public int fixedIvLength() {
            return fixedIvLength;
        }

        public boolean hasAdditionalData() {
            return false;
        }
        
        public TlsCipherMode newInstance(TlsVersion version, TlsExchangeAuthenticator authenticator, byte[] iv, byte[] key, boolean forEncryption) {
            var engine = this.engine.get();
            engine.init(forEncryption, key);
            var mode = this.mode.get();
            mode.init(version, authenticator, engine, iv);
            return mode;
        }
    }
}
