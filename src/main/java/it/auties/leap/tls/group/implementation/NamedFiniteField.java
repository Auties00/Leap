package it.auties.leap.tls.group.implementation;

import it.auties.leap.tls.alert.TlsAlert;
import it.auties.leap.tls.alert.TlsAlertLevel;
import it.auties.leap.tls.alert.TlsAlertType;
import it.auties.leap.tls.ciphersuite.exchange.TlsKeyExchange;
import it.auties.leap.tls.ciphersuite.exchange.implementation.DHKeyExchange;
import it.auties.leap.tls.context.TlsContext;
import it.auties.leap.tls.group.TlsSupportedFiniteField;
import it.auties.leap.tls.property.TlsProperty;
import it.auties.leap.tls.secret.TlsSecret;

import javax.crypto.KeyAgreement;
import javax.crypto.interfaces.DHPublicKey;
import javax.crypto.spec.DHParameterSpec;
import javax.crypto.spec.DHPublicKeySpec;
import java.math.BigInteger;
import java.security.*;
import java.util.Arrays;

public final class NamedFiniteField implements TlsSupportedFiniteField {
    private static final BigInteger P2048 = new BigInteger("FFFFFFFFFFFFFFFFADF85458A2BB4A9AAFDC5620273D3CF1D8B9C583CE2D3695A9E13641146433FBCC939DCE249B3EF97D2FE363630C75D8F681B202AEC4617AD3DF1ED5D5FD65612433F51F5F066ED0856365553DED1AF3B557135E7F57C935984F0C70E0E68B77E2A689DAF3EFE8721DF158A136ADE73530ACCA4F483A797ABC0AB182B324FB61D108A94BB2C8E3FBB96ADAB760D7F4681D4F42A3DE394DF4AE56EDE76372BB190B07A7C8EE0A6D709E02FCE1CDF7E2ECC03404CD28342F619172FE9CE98583FF8E4F1232EEF28183C3FE3B1B4C6FAD733BB5FCBC2EC22005C58EF1837D1683B2C6F34A26C1B2EFFA886B423861285C97FFFFFFFFFFFFFFFF", 16);
    private static final BigInteger P3072 = new BigInteger("FFFFFFFFFFFFFFFFADF85458A2BB4A9AAFDC5620273D3CF1D8B9C583CE2D3695A9E13641146433FBCC939DCE249B3EF97D2FE363630C75D8F681B202AEC4617AD3DF1ED5D5FD65612433F51F5F066ED0856365553DED1AF3B557135E7F57C935984F0C70E0E68B77E2A689DAF3EFE8721DF158A136ADE73530ACCA4F483A797ABC0AB182B324FB61D108A94BB2C8E3FBB96ADAB760D7F4681D4F42A3DE394DF4AE56EDE76372BB190B07A7C8EE0A6D709E02FCE1CDF7E2ECC03404CD28342F619172FE9CE98583FF8E4F1232EEF28183C3FE3B1B4C6FAD733BB5FCBC2EC22005C58EF1837D1683B2C6F34A26C1B2EFFA886B4238611FCFDCDE355B3B6519035BBC34F4DEF99C023861B46FC9D6E6C9077AD91D2691F7F7EE598CB0FAC186D91CAEFE130985139270B4130C93BC437944F4FD4452E2D74DD364F2E21E71F54BFF5CAE82AB9C9DF69EE86D2BC522363A0DABC521979B0DEADA1DBF9A42D5C4484E0ABCD06BFA53DDEF3C1B20EE3FD59D7C25E41D2B66C62E37FFFFFFFFFFFFFFFF", 16);
    private static final BigInteger P4096 = new BigInteger
    private static final BigInteger P6144 = new BigInteger
    private static final BigInteger P8192 = new BigInteger

    private static final NamedFiniteField FFDHE2048 = new NamedFiniteField(256, true, new DHParameterSpec(P2048, BigInteger.TWO));
    private static final NamedFiniteField FFDHE3072 = new NamedFiniteField(257, true, new DHParameterSpec(P3072, BigInteger.TWO));
    private static final NamedFiniteField FFDHE4096 = new NamedFiniteField(258, true, new DHParameterSpec(P4096, BigInteger.TWO));
    private static final NamedFiniteField FFDHE6144 = new NamedFiniteField(259, true, new DHParameterSpec(P6144, BigInteger.TWO));
    private static final NamedFiniteField FFDHE8192 = new NamedFiniteField(260, true, new DHParameterSpec(P8192, BigInteger.TWO));

    public static NamedFiniteField ffdhe2048() {
        return FFDHE2048;
    }

    public static NamedFiniteField ffdhe3072() {
        return FFDHE3072;
    }

    public static NamedFiniteField ffdhe4096() {
        return FFDHE4096;
    }

    public static NamedFiniteField ffdhe6144() {
        return FFDHE6144;
    }

    public static NamedFiniteField ffdhe8192() {
        return FFDHE8192;
    }
    
    private final int id;
    private final boolean dtls;
    private final DHParameterSpec spec;

    private NamedFiniteField(int id, boolean dtls, DHParameterSpec spec) {
        this.id = id;
        this.dtls = dtls;
        this.spec = spec;
    }

    @Override
    public Integer id() {
        return id;
    }

    @Override
    public boolean dtls() {
        return dtls;
    }

    public KeyPair generateKeyPair(TlsContext context) {
        try {
            var keyPairGenerator = KeyPairGenerator.getInstance("DH");
            keyPairGenerator.initialize(spec);
            return keyPairGenerator.generateKeyPair();
        } catch (GeneralSecurityException exception) {
            throw new TlsAlert("Cannot generate EC keypair: " + exception.getMessage(), TlsAlertLevel.FATAL, TlsAlertType.INTERNAL_ERROR);
        }
    }

    @Override
    public TlsSecret computeSharedSecret(TlsContext context) {
        var privateKey = context.localConnectionState()
                .ephemeralKeyPair()
                .orElseThrow(() -> new TlsAlert("Missing local ephemeral key pair", TlsAlertLevel.FATAL, TlsAlertType.INTERNAL_ERROR))
                .privateKey()
                .orElseThrow(() -> new TlsAlert("Missing local ephemeral private key", TlsAlertLevel.FATAL, TlsAlertType.INTERNAL_ERROR));
        var keyExchangeType = context.getNegotiatedValue(TlsProperty.cipher())
                .orElseThrow(() -> new TlsAlert("Missing negotiated property: cipher", TlsAlertLevel.FATAL, TlsAlertType.INTERNAL_ERROR))
                .keyExchangeFactory()
                .type();
        var publicKey = switch (keyExchangeType) {
            case STATIC -> context.remoteConnectionState()
                    .orElseThrow(() -> new TlsAlert("No remote connection state was created", TlsAlertLevel.FATAL, TlsAlertType.INTERNAL_ERROR))
                    .staticCertificate()
                    .orElseThrow(() -> new TlsAlert("Expected at least one static DH certificate", TlsAlertLevel.FATAL, TlsAlertType.CERTIFICATE_UNOBTAINABLE))
                    .value()
                    .getPublicKey();
            case EPHEMERAL -> context.remoteConnectionState()
                    .orElseThrow(() -> new TlsAlert("No remote connection state was created", TlsAlertLevel.FATAL, TlsAlertType.INTERNAL_ERROR))
                    .ephemeralKeyPair()
                    .orElseThrow(() -> new TlsAlert("Missing remote public key for ephemeral pre master secret generation", TlsAlertLevel.FATAL, TlsAlertType.INTERNAL_ERROR))
                    .publicKey();
        };
        try {
            var keyAgreement = KeyAgreement.getInstance("DH");
            keyAgreement.init(privateKey, spec);
            keyAgreement.doPhase(publicKey, true);
            var result = keyAgreement.generateSecret();
            System.out.println("Remote public key: " + Arrays.toString(((DHPublicKey) publicKey).getY().toByteArray()));
            return TlsSecret.of(result);
        }catch (GeneralSecurityException exception) {
            throw new TlsAlert("Cannot compute shared secret: " + exception.getMessage(), TlsAlertLevel.FATAL, TlsAlertType.INTERNAL_ERROR);
        }
    }

    @Override
    public PublicKey parsePublicKey(byte[] rawPublicKey) {
        try {
            var keyFactory = KeyFactory.getInstance("DH");
            var dhPubKeySpecs = new DHPublicKeySpec(
                    new BigInteger(1, rawPublicKey),
                    spec.getP(),
                    spec.getG()
            );
            return keyFactory.generatePublic(dhPubKeySpecs);
        }catch (GeneralSecurityException exception) {
            throw new TlsAlert("Cannot parse DH key: " + exception.getMessage(), TlsAlertLevel.FATAL, TlsAlertType.INTERNAL_ERROR);
        }
    }

    @Override
    public byte[] dumpPublicKey(PublicKey jcePublicKey) {
        if(!(jcePublicKey instanceof DHPublicKey publicKey)) {
            throw new TlsAlert("Unsupported key type", TlsAlertLevel.FATAL, TlsAlertType.INTERNAL_ERROR);
        }

        return publicKey.getY().toByteArray();
    }

    @Override
    public boolean accepts(TlsKeyExchange exchange) {
        return exchange instanceof DHKeyExchange keyExchange
                && keyExchange.p().equals(spec.getP())
                && keyExchange.g().equals(spec.getG());
    }
}
