// Generated by jextract

package it.auties.leap.socket.common.unix;

import java.lang.foreign.*;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfInt;

/**
 * {@snippet lang=c :
 * struct __Block_byref_ND {
 *     void *__isa;
 *     int __flags;
 *     int __reserved;
 *     void *__FuncPtr;
 * }
 * }
 */
public class __Block_byref_ND {

    __Block_byref_ND() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        UnixKernel.C_POINTER.withName("__isa"),
        UnixKernel.C_INT.withName("__flags"),
        UnixKernel.C_INT.withName("__reserved"),
        UnixKernel.C_POINTER.withName("__FuncPtr")
    ).withName("__Block_byref_ND");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout __isa$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("__isa"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *__isa
     * }
     */
    public static final AddressLayout __isa$layout() {
        return __isa$LAYOUT;
    }

    private static final long __isa$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *__isa
     * }
     */
    public static final long __isa$offset() {
        return __isa$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *__isa
     * }
     */
    public static MemorySegment __isa(MemorySegment struct) {
        return struct.get(__isa$LAYOUT, __isa$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *__isa
     * }
     */
    public static void __isa(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(__isa$LAYOUT, __isa$OFFSET, fieldValue);
    }

    private static final OfInt __flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("__flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int __flags
     * }
     */
    public static final OfInt __flags$layout() {
        return __flags$LAYOUT;
    }

    private static final long __flags$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int __flags
     * }
     */
    public static final long __flags$offset() {
        return __flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int __flags
     * }
     */
    public static int __flags(MemorySegment struct) {
        return struct.get(__flags$LAYOUT, __flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int __flags
     * }
     */
    public static void __flags(MemorySegment struct, int fieldValue) {
        struct.set(__flags$LAYOUT, __flags$OFFSET, fieldValue);
    }

    private static final OfInt __reserved$LAYOUT = (OfInt)$LAYOUT.select(groupElement("__reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int __reserved
     * }
     */
    public static final OfInt __reserved$layout() {
        return __reserved$LAYOUT;
    }

    private static final long __reserved$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int __reserved
     * }
     */
    public static final long __reserved$offset() {
        return __reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int __reserved
     * }
     */
    public static int __reserved(MemorySegment struct) {
        return struct.get(__reserved$LAYOUT, __reserved$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int __reserved
     * }
     */
    public static void __reserved(MemorySegment struct, int fieldValue) {
        struct.set(__reserved$LAYOUT, __reserved$OFFSET, fieldValue);
    }

    private static final AddressLayout __FuncPtr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("__FuncPtr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *__FuncPtr
     * }
     */
    public static final AddressLayout __FuncPtr$layout() {
        return __FuncPtr$LAYOUT;
    }

    private static final long __FuncPtr$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *__FuncPtr
     * }
     */
    public static final long __FuncPtr$offset() {
        return __FuncPtr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *__FuncPtr
     * }
     */
    public static MemorySegment __FuncPtr(MemorySegment struct) {
        return struct.get(__FuncPtr$LAYOUT, __FuncPtr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *__FuncPtr
     * }
     */
    public static void __FuncPtr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(__FuncPtr$LAYOUT, __FuncPtr$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

